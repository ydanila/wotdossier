//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WotDossier.Resources {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WotDossier.Resources.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Mark of Mastery.
        /// </summary>
        public static string Achievement_MarkOfMastery {
            get {
                return ResourceManager.GetString("Achievement_MarkOfMastery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Marks on Gun.
        /// </summary>
        public static string Achievement_MarksOnGun {
            get {
                return ResourceManager.GetString("Achievement_MarksOnGun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Armor-Piercing.
        /// </summary>
        public static string ARMOR_PIERCING {
            get {
                return ResourceManager.GetString("ARMOR_PIERCING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на AP Composite-Rigid.
        /// </summary>
        public static string ARMOR_PIERCING_CR {
            get {
                return ResourceManager.GetString("ARMOR_PIERCING_CR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на AP High-Explosive.
        /// </summary>
        public static string ARMOR_PIERCING_HE {
            get {
                return ResourceManager.GetString("ARMOR_PIERCING_HE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +15% to engine power for one minute.
        /// </summary>
        public static string artefacts_afterburning_descr {
            get {
                return ResourceManager.GetString("artefacts_afterburning_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Engine Power Boost.
        /// </summary>
        public static string artefacts_afterburning_name {
            get {
                return ResourceManager.GetString("artefacts_afterburning_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +20% to accuracy during movement and turret rotation.
        /// </summary>
        public static string artefacts_aimingStabilizer_descr {
            get {
                return ResourceManager.GetString("artefacts_aimingStabilizer_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Vertical Stabilizer Mk 1.
        /// </summary>
        public static string artefacts_aimingStabilizer_Mk1_name {
            get {
                return ResourceManager.GetString("artefacts_aimingStabilizer_Mk1_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Vertical Stabilizer Mk 2.
        /// </summary>
        public static string artefacts_aimingStabilizer_Mk2_name {
            get {
                return ResourceManager.GetString("artefacts_aimingStabilizer_Mk2_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +30% to armor protection from ramming and explosions 
        ///+30% to protection of the crew from injuries.
        /// </summary>
        public static string artefacts_antifragmentationLining_heavy_descr {
            get {
                return ResourceManager.GetString("artefacts_antifragmentationLining_heavy_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Heavy Spall Liner.
        /// </summary>
        public static string artefacts_antifragmentationLining_heavy_name {
            get {
                return ResourceManager.GetString("artefacts_antifragmentationLining_heavy_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +20% to armor protection from ramming and explosions 
        ///+20% to protection of the crew from injuries.
        /// </summary>
        public static string artefacts_antifragmentationLining_light_descr {
            get {
                return ResourceManager.GetString("artefacts_antifragmentationLining_light_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Light Spall Liner.
        /// </summary>
        public static string artefacts_antifragmentationLining_light_name {
            get {
                return ResourceManager.GetString("artefacts_antifragmentationLining_light_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +25% to armor protection from ramming and explosions 
        ///+25% to protection of the crew from injuries.
        /// </summary>
        public static string artefacts_antifragmentationLining_medium_descr {
            get {
                return ResourceManager.GetString("artefacts_antifragmentationLining_medium_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Medium Spall Liner.
        /// </summary>
        public static string artefacts_antifragmentationLining_medium_name {
            get {
                return ResourceManager.GetString("artefacts_antifragmentationLining_medium_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +50% to armor protection from ramming and explosions 
        ///+50% to protection of the crew from injuries.
        /// </summary>
        public static string artefacts_antifragmentationLining_superheavy_descr {
            get {
                return ResourceManager.GetString("artefacts_antifragmentationLining_superheavy_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Superheavy Spall Liner.
        /// </summary>
        public static string artefacts_antifragmentationLining_superheavy_name {
            get {
                return ResourceManager.GetString("artefacts_antifragmentationLining_superheavy_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to fire protection..
        /// </summary>
        public static string artefacts_autoExtinguishers_always {
            get {
                return ResourceManager.GetString("artefacts_autoExtinguishers_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Automatic fire extinguishing in your vehicle..
        /// </summary>
        public static string artefacts_autoExtinguishers_descr {
            get {
                return ResourceManager.GetString("artefacts_autoExtinguishers_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Automatic Fire Extinguisher.
        /// </summary>
        public static string artefacts_autoExtinguishers_name {
            get {
                return ResourceManager.GetString("artefacts_autoExtinguishers_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на automatic fire extinguishing in your vehicle. Single use only..
        /// </summary>
        public static string artefacts_autoExtinguishers_onUse {
            get {
                return ResourceManager.GetString("artefacts_autoExtinguishers_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_autoExtinguishers_restriction {
            get {
                return ResourceManager.GetString("artefacts_autoExtinguishers_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reduces detection chance when the vehicle is stationary.
        /// </summary>
        public static string artefacts_camouflageNet_descr {
            get {
                return ResourceManager.GetString("artefacts_camouflageNet_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Camouflage Net.
        /// </summary>
        public static string artefacts_camouflageNet_name {
            get {
                return ResourceManager.GetString("artefacts_camouflageNet_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +50% to fuel tank durability.
        /// </summary>
        public static string artefacts_carbonDioxide_descr {
            get {
                return ResourceManager.GetString("artefacts_carbonDioxide_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fill Tanks with CO2.
        /// </summary>
        public static string artefacts_carbonDioxide_name {
            get {
                return ResourceManager.GetString("artefacts_carbonDioxide_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to all crew skills and perks for the course of the battle..
        /// </summary>
        public static string artefacts_chocolate_always {
            get {
                return ResourceManager.GetString("artefacts_chocolate_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to all crew skills and perks..
        /// </summary>
        public static string artefacts_chocolate_descr {
            get {
                return ResourceManager.GetString("artefacts_chocolate_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Chocolate.
        /// </summary>
        public static string artefacts_chocolate_name {
            get {
                return ResourceManager.GetString("artefacts_chocolate_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_chocolate_onUse {
            get {
                return ResourceManager.GetString("artefacts_chocolate_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restricted: German vehicles..
        /// </summary>
        public static string artefacts_chocolate_restriction {
            get {
                return ResourceManager.GetString("artefacts_chocolate_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to view range, up to a range of 500 m.
        /// </summary>
        public static string artefacts_coatedOptics_descr {
            get {
                return ResourceManager.GetString("artefacts_coatedOptics_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Coated Optics.
        /// </summary>
        public static string artefacts_coatedOptics_name {
            get {
                return ResourceManager.GetString("artefacts_coatedOptics_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to all crew skills and perks for the course of the battle..
        /// </summary>
        public static string artefacts_cocacola_always {
            get {
                return ResourceManager.GetString("artefacts_cocacola_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to all crew skills and perks..
        /// </summary>
        public static string artefacts_cocacola_descr {
            get {
                return ResourceManager.GetString("artefacts_cocacola_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Case of Cola.
        /// </summary>
        public static string artefacts_cocacola_name {
            get {
                return ResourceManager.GetString("artefacts_cocacola_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_cocacola_onUse {
            get {
                return ResourceManager.GetString("artefacts_cocacola_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restricted: U.S. vehicles..
        /// </summary>
        public static string artefacts_cocacola_restriction {
            get {
                return ResourceManager.GetString("artefacts_cocacola_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to aiming speed.
        /// </summary>
        public static string artefacts_enhancedAimDrives_descr {
            get {
                return ResourceManager.GetString("artefacts_enhancedAimDrives_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Gun Laying Drive.
        /// </summary>
        public static string artefacts_enhancedAimDrives_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedAimDrives_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Belleville Washers.
        /// </summary>
        public static string artefacts_enhancedBelwillWashers_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedBelwillWashers_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to suspension load capacity
        ///+20% to suspension durability
        /// -50% to hull damage caused by suspension damage during impact.
        /// </summary>
        public static string artefacts_enhancedHorizontal_elastic_elements_descr {
            get {
                return ResourceManager.GetString("artefacts_enhancedHorizontal_elastic_elements_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Horizontal Leaf Springs.
        /// </summary>
        public static string artefacts_enhancedHorizontal_elastic_elements_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedHorizontal_elastic_elements_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to suspension load capacity
        ///+20% to suspension durability
        /// -50% to hull damage caused by suspension damage during impact.
        /// </summary>
        public static string artefacts_enhancedHorizontal_springs_class2_descr {
            get {
                return ResourceManager.GetString("artefacts_enhancedHorizontal_springs_class2_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Coil Springs Class 2.
        /// </summary>
        public static string artefacts_enhancedHorizontal_springs_class2_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedHorizontal_springs_class2_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to suspension load capacity
        ///+20% to suspension durability
        /// -50% to hull damage caused by suspension damage during impact.
        /// </summary>
        public static string artefacts_enhancedHorizontal_springs_class3_descr {
            get {
                return ResourceManager.GetString("artefacts_enhancedHorizontal_springs_class3_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Coil Springs Class 3.
        /// </summary>
        public static string artefacts_enhancedHorizontal_springs_class3_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedHorizontal_springs_class3_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to suspension load capacity
        ///+20% to suspension durability
        /// -50% to hull damage caused by suspension damage during impact.
        /// </summary>
        public static string artefacts_enhancedHorizontal_springs_descr {
            get {
                return ResourceManager.GetString("artefacts_enhancedHorizontal_springs_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Coil Springs Class 1.
        /// </summary>
        public static string artefacts_enhancedHorizontal_springs_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedHorizontal_springs_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Levers.
        /// </summary>
        public static string artefacts_enhancedLevers_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedLevers_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Longitudinal Torsion Bars.
        /// </summary>
        public static string artefacts_enhancedLongitudinalTorsions_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedLongitudinalTorsions_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to suspension load capacity
        ///+20% to suspension durability
        /// -50% to hull damage caused by suspension damage during impact.
        /// </summary>
        public static string artefacts_enhancedSprings_class2_descr {
            get {
                return ResourceManager.GetString("artefacts_enhancedSprings_class2_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Leaf Springs 2 Class.
        /// </summary>
        public static string artefacts_enhancedSprings_class2_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedSprings_class2_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to suspension load capacity
        ///+20% to suspension durability
        /// -50% to hull damage caused by suspension damage during impact.
        /// </summary>
        public static string artefacts_enhancedSprings_class3_descr {
            get {
                return ResourceManager.GetString("artefacts_enhancedSprings_class3_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Leaf Springs 3 Class.
        /// </summary>
        public static string artefacts_enhancedSprings_class3_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedSprings_class3_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Springs.
        /// </summary>
        public static string artefacts_enhancedSprings_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedSprings_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Candle Suspension.
        /// </summary>
        public static string artefacts_enhancedSuspension_candle_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedSuspension_candle_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Christie Suspension.
        /// </summary>
        public static string artefacts_enhancedSuspension_Christie_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedSuspension_Christie_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to suspension load capacity
        ///+20% to suspension durability
        /// -50% to hull damage caused by suspension damage during impact.
        /// </summary>
        public static string artefacts_enhancedSuspension_descr {
            get {
                return ResourceManager.GetString("artefacts_enhancedSuspension_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Vickers Suspension.
        /// </summary>
        public static string artefacts_enhancedSuspension_Vikkers_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedSuspension_Vikkers_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Torsion Bars 1 t Class.
        /// </summary>
        public static string artefacts_enhancedTorsions1t_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedTorsions1t_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Torsion Bars 3 t Class.
        /// </summary>
        public static string artefacts_enhancedTorsions3t_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedTorsions3t_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Torsion Bars 5+ t Class.
        /// </summary>
        public static string artefacts_enhancedTorsions5t_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedTorsions5t_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to suspension load capacity
        ///+20% to suspension durability
        /// -50% to hull damage caused by suspension damage during impact.
        /// </summary>
        public static string artefacts_enhancedVertical_elastic_elements_descr {
            get {
                return ResourceManager.GetString("artefacts_enhancedVertical_elastic_elements_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Vertical Leaf Springs.
        /// </summary>
        public static string artefacts_enhancedVertical_elastic_elements_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedVertical_elastic_elements_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to suspension load capacity
        ///+20% to suspension durability
        /// -50% to hull damage caused by suspension damage during impact.
        /// </summary>
        public static string artefacts_enhancedVertical_springs_class2_descr {
            get {
                return ResourceManager.GetString("artefacts_enhancedVertical_springs_class2_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Vertical Coil Springs 2 Class.
        /// </summary>
        public static string artefacts_enhancedVertical_springs_class2_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedVertical_springs_class2_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to suspension load capacity
        ///+20% to suspension durability
        /// -50% to hull damage caused by suspension damage during impact.
        /// </summary>
        public static string artefacts_enhancedVertical_springs_class3_descr {
            get {
                return ResourceManager.GetString("artefacts_enhancedVertical_springs_class3_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Vertical Coil Springs 3 Class.
        /// </summary>
        public static string artefacts_enhancedVertical_springs_class3_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedVertical_springs_class3_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to suspension load capacity
        ///+20% to suspension durability
        /// -50% to hull damage caused by suspension damage during impact.
        /// </summary>
        public static string artefacts_enhancedVertical_springs_descr {
            get {
                return ResourceManager.GetString("artefacts_enhancedVertical_springs_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enhanced Vertical Coil Springs 1 Class.
        /// </summary>
        public static string artefacts_enhancedVertical_springs_name {
            get {
                return ResourceManager.GetString("artefacts_enhancedVertical_springs_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +50% to engine durability.
        /// </summary>
        public static string artefacts_filterCyclone_descr {
            get {
                return ResourceManager.GetString("artefacts_filterCyclone_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cyclone Filter.
        /// </summary>
        public static string artefacts_filterCyclone_name {
            get {
                return ResourceManager.GetString("artefacts_filterCyclone_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +5% to engine power and turret traverse speed for the course of the battle..
        /// </summary>
        public static string artefacts_gasoline100_always {
            get {
                return ResourceManager.GetString("artefacts_gasoline100_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +5% to engine power and turret traverse speed..
        /// </summary>
        public static string artefacts_gasoline100_descr {
            get {
                return ResourceManager.GetString("artefacts_gasoline100_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 100-octane Gasoline.
        /// </summary>
        public static string artefacts_gasoline100_name {
            get {
                return ResourceManager.GetString("artefacts_gasoline100_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_gasoline100_onUse {
            get {
                return ResourceManager.GetString("artefacts_gasoline100_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restricted: German, U.S., U.K., and French gasoline engines..
        /// </summary>
        public static string artefacts_gasoline100_restriction {
            get {
                return ResourceManager.GetString("artefacts_gasoline100_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to engine power and turret traverse speed for the course of the battle..
        /// </summary>
        public static string artefacts_gasoline105_always {
            get {
                return ResourceManager.GetString("artefacts_gasoline105_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to engine power and turret traverse speed..
        /// </summary>
        public static string artefacts_gasoline105_descr {
            get {
                return ResourceManager.GetString("artefacts_gasoline105_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 105-octane Gasoline.
        /// </summary>
        public static string artefacts_gasoline105_name {
            get {
                return ResourceManager.GetString("artefacts_gasoline105_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_gasoline105_onUse {
            get {
                return ResourceManager.GetString("artefacts_gasoline105_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restricted: German, U.S., U.K., and French gasoline engines..
        /// </summary>
        public static string artefacts_gasoline105_restriction {
            get {
                return ResourceManager.GetString("artefacts_gasoline105_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to performance on soft ground,
        ///+5% to performance on moderately soft ground.
        /// </summary>
        public static string artefacts_grousers_descr {
            get {
                return ResourceManager.GetString("artefacts_grousers_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Additional Grousers.
        /// </summary>
        public static string artefacts_grousers_name {
            get {
                return ResourceManager.GetString("artefacts_grousers_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_handExtinguishers_always {
            get {
                return ResourceManager.GetString("artefacts_handExtinguishers_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fire extinguishing in your vehicle..
        /// </summary>
        public static string artefacts_handExtinguishers_descr {
            get {
                return ResourceManager.GetString("artefacts_handExtinguishers_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Manual Fire Extinguisher.
        /// </summary>
        public static string artefacts_handExtinguishers_name {
            get {
                return ResourceManager.GetString("artefacts_handExtinguishers_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на fire extinguishing in your vehicle. Single use only..
        /// </summary>
        public static string artefacts_handExtinguishers_onUse {
            get {
                return ResourceManager.GetString("artefacts_handExtinguishers_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_handExtinguishers_restriction {
            get {
                return ResourceManager.GetString("artefacts_handExtinguishers_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to all crew skills and perks for the course of the battle..
        /// </summary>
        public static string artefacts_hotCoffee_always {
            get {
                return ResourceManager.GetString("artefacts_hotCoffee_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to all crew skills and perks..
        /// </summary>
        public static string artefacts_hotCoffee_descr {
            get {
                return ResourceManager.GetString("artefacts_hotCoffee_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Strong Coffee.
        /// </summary>
        public static string artefacts_hotCoffee_name {
            get {
                return ResourceManager.GetString("artefacts_hotCoffee_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_hotCoffee_onUse {
            get {
                return ResourceManager.GetString("artefacts_hotCoffee_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restricted: French vehicles..
        /// </summary>
        public static string artefacts_hotCoffee_restriction {
            get {
                return ResourceManager.GetString("artefacts_hotCoffee_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Improved Ventilation Class 1.
        /// </summary>
        public static string artefacts_improvedVentilation_class1_name {
            get {
                return ResourceManager.GetString("artefacts_improvedVentilation_class1_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Improved Ventilation Class 2.
        /// </summary>
        public static string artefacts_improvedVentilation_class2_name {
            get {
                return ResourceManager.GetString("artefacts_improvedVentilation_class2_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Improved Ventilation Class 3.
        /// </summary>
        public static string artefacts_improvedVentilation_class3_name {
            get {
                return ResourceManager.GetString("artefacts_improvedVentilation_class3_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +5% to all crew skills.
        /// </summary>
        public static string artefacts_improvedVentilation_descr {
            get {
                return ResourceManager.GetString("artefacts_improvedVentilation_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Large-Caliber Artillery-Shell Rammer.
        /// </summary>
        public static string artefacts_largeCaliberHowitzerRammer_name {
            get {
                return ResourceManager.GetString("artefacts_largeCaliberHowitzerRammer_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Large-Сaliber Tank Gun Rammer.
        /// </summary>
        public static string artefacts_largeCaliberTankRammer_name {
            get {
                return ResourceManager.GetString("artefacts_largeCaliberTankRammer_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +15% to protection of the crew from injuries..
        /// </summary>
        public static string artefacts_largeMedkit_always {
            get {
                return ResourceManager.GetString("artefacts_largeMedkit_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Treatment of all injured crew members..
        /// </summary>
        public static string artefacts_largeMedkit_descr {
            get {
                return ResourceManager.GetString("artefacts_largeMedkit_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Large First Aid Kit.
        /// </summary>
        public static string artefacts_largeMedkit_name {
            get {
                return ResourceManager.GetString("artefacts_largeMedkit_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на treatment of all injured crew members. Single use only..
        /// </summary>
        public static string artefacts_largeMedkit_onUse {
            get {
                return ResourceManager.GetString("artefacts_largeMedkit_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_largeMedkit_restriction {
            get {
                return ResourceManager.GetString("artefacts_largeMedkit_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to speed of module repairs..
        /// </summary>
        public static string artefacts_largeRepairkit_always {
            get {
                return ResourceManager.GetString("artefacts_largeRepairkit_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Repair of all damaged modules..
        /// </summary>
        public static string artefacts_largeRepairkit_descr {
            get {
                return ResourceManager.GetString("artefacts_largeRepairkit_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Large Repair Kit.
        /// </summary>
        public static string artefacts_largeRepairkit_name {
            get {
                return ResourceManager.GetString("artefacts_largeRepairkit_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Repair of all damaged modules. Single use only..
        /// </summary>
        public static string artefacts_largeRepairkit_onUse {
            get {
                return ResourceManager.GetString("artefacts_largeRepairkit_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_largeRepairkit_restriction {
            get {
                return ResourceManager.GetString("artefacts_largeRepairkit_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +5% to engine power for the course of the battle..
        /// </summary>
        public static string artefacts_lendLeaseOil_always {
            get {
                return ResourceManager.GetString("artefacts_lendLeaseOil_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +5% to engine power..
        /// </summary>
        public static string artefacts_lendLeaseOil_descr {
            get {
                return ResourceManager.GetString("artefacts_lendLeaseOil_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Lend-Lease Oil.
        /// </summary>
        public static string artefacts_lendLeaseOil_name {
            get {
                return ResourceManager.GetString("artefacts_lendLeaseOil_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_lendLeaseOil_onUse {
            get {
                return ResourceManager.GetString("artefacts_lendLeaseOil_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restricted: U.S.S.R. vehicles..
        /// </summary>
        public static string artefacts_lendLeaseOil_restriction {
            get {
                return ResourceManager.GetString("artefacts_lendLeaseOil_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Medium-Caliber Artillery Shell Rammer.
        /// </summary>
        public static string artefacts_mediumCaliberHowitzerRammer_name {
            get {
                return ResourceManager.GetString("artefacts_mediumCaliberHowitzerRammer_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Medium-Caliber Tank Gun Rammer.
        /// </summary>
        public static string artefacts_mediumCaliberTankRammer_name {
            get {
                return ResourceManager.GetString("artefacts_mediumCaliberTankRammer_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +5% to engine power for the course of the battle..
        /// </summary>
        public static string artefacts_qualityOil_always {
            get {
                return ResourceManager.GetString("artefacts_qualityOil_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +5% to engine power..
        /// </summary>
        public static string artefacts_qualityOil_descr {
            get {
                return ResourceManager.GetString("artefacts_qualityOil_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Quality Oil.
        /// </summary>
        public static string artefacts_qualityOil_name {
            get {
                return ResourceManager.GetString("artefacts_qualityOil_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_qualityOil_onUse {
            get {
                return ResourceManager.GetString("artefacts_qualityOil_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restricted: Chinese and Japanese vehicles..
        /// </summary>
        public static string artefacts_qualityOil_restriction {
            get {
                return ResourceManager.GetString("artefacts_qualityOil_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на -10% to loading time.
        /// </summary>
        public static string artefacts_rammer_descr {
            get {
                return ResourceManager.GetString("artefacts_rammer_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to all crew skills and perks for the course of the battle..
        /// </summary>
        public static string artefacts_ration_always {
            get {
                return ResourceManager.GetString("artefacts_ration_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to all crew skills and perks for the course of the battle..
        /// </summary>
        public static string artefacts_ration_china_always {
            get {
                return ResourceManager.GetString("artefacts_ration_china_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to all crew skills and perks..
        /// </summary>
        public static string artefacts_ration_china_descr {
            get {
                return ResourceManager.GetString("artefacts_ration_china_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Improved Combat Rations.
        /// </summary>
        public static string artefacts_ration_china_name {
            get {
                return ResourceManager.GetString("artefacts_ration_china_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_ration_china_onUse {
            get {
                return ResourceManager.GetString("artefacts_ration_china_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restricted: Chinese vehicles..
        /// </summary>
        public static string artefacts_ration_china_restriction {
            get {
                return ResourceManager.GetString("artefacts_ration_china_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to all crew skills and perks..
        /// </summary>
        public static string artefacts_ration_descr {
            get {
                return ResourceManager.GetString("artefacts_ration_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to all crew skills and perks for the course of the battle..
        /// </summary>
        public static string artefacts_ration_japan_always {
            get {
                return ResourceManager.GetString("artefacts_ration_japan_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to all crew skills and perks..
        /// </summary>
        public static string artefacts_ration_japan_descr {
            get {
                return ResourceManager.GetString("artefacts_ration_japan_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Onigiri.
        /// </summary>
        public static string artefacts_ration_japan_name {
            get {
                return ResourceManager.GetString("artefacts_ration_japan_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_ration_japan_onUse {
            get {
                return ResourceManager.GetString("artefacts_ration_japan_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restricted: Japanese vehicles..
        /// </summary>
        public static string artefacts_ration_japan_restriction {
            get {
                return ResourceManager.GetString("artefacts_ration_japan_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Extra Combat Rations.
        /// </summary>
        public static string artefacts_ration_name {
            get {
                return ResourceManager.GetString("artefacts_ration_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_ration_onUse {
            get {
                return ResourceManager.GetString("artefacts_ration_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restricted: U.S.S.R. vehicles..
        /// </summary>
        public static string artefacts_ration_restriction {
            get {
                return ResourceManager.GetString("artefacts_ration_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to all crew skills and perks for the course of the battle..
        /// </summary>
        public static string artefacts_ration_uk_always {
            get {
                return ResourceManager.GetString("artefacts_ration_uk_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to all crew skills and perks..
        /// </summary>
        public static string artefacts_ration_uk_descr {
            get {
                return ResourceManager.GetString("artefacts_ration_uk_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pudding and Tea.
        /// </summary>
        public static string artefacts_ration_uk_name {
            get {
                return ResourceManager.GetString("artefacts_ration_uk_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_ration_uk_onUse {
            get {
                return ResourceManager.GetString("artefacts_ration_uk_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restricted: U.K. vehicles..
        /// </summary>
        public static string artefacts_ration_uk_restriction {
            get {
                return ResourceManager.GetString("artefacts_ration_uk_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_removedRpmLimiter_always {
            get {
                return ResourceManager.GetString("artefacts_removedRpmLimiter_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to engine power but damages the engine..
        /// </summary>
        public static string artefacts_removedRpmLimiter_descr {
            get {
                return ResourceManager.GetString("artefacts_removedRpmLimiter_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Removed Speed Governor.
        /// </summary>
        public static string artefacts_removedRpmLimiter_name {
            get {
                return ResourceManager.GetString("artefacts_removedRpmLimiter_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +10% to engine power but damages the engine. Multiple use..
        /// </summary>
        public static string artefacts_removedRpmLimiter_onUse {
            get {
                return ResourceManager.GetString("artefacts_removedRpmLimiter_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restricted: U.S.S.R. and Chinese vehicles..
        /// </summary>
        public static string artefacts_removedRpmLimiter_restriction {
            get {
                return ResourceManager.GetString("artefacts_removedRpmLimiter_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_smallMedkit_always {
            get {
                return ResourceManager.GetString("artefacts_smallMedkit_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Treatment of an injured crew member..
        /// </summary>
        public static string artefacts_smallMedkit_descr {
            get {
                return ResourceManager.GetString("artefacts_smallMedkit_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Small First Aid Kit.
        /// </summary>
        public static string artefacts_smallMedkit_name {
            get {
                return ResourceManager.GetString("artefacts_smallMedkit_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на treatment of an injured crew member. Single use only..
        /// </summary>
        public static string artefacts_smallMedkit_onUse {
            get {
                return ResourceManager.GetString("artefacts_smallMedkit_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_smallMedkit_restriction {
            get {
                return ResourceManager.GetString("artefacts_smallMedkit_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_smallRepairkit_always {
            get {
                return ResourceManager.GetString("artefacts_smallRepairkit_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Repair of a damaged module or two damaged tracks..
        /// </summary>
        public static string artefacts_smallRepairkit_descr {
            get {
                return ResourceManager.GetString("artefacts_smallRepairkit_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Small Repair Kit.
        /// </summary>
        public static string artefacts_smallRepairkit_name {
            get {
                return ResourceManager.GetString("artefacts_smallRepairkit_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на repair of a damaged module or two damaged tracks. Single use only..
        /// </summary>
        public static string artefacts_smallRepairkit_onUse {
            get {
                return ResourceManager.GetString("artefacts_smallRepairkit_onUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ?empty?.
        /// </summary>
        public static string artefacts_smallRepairkit_restriction {
            get {
                return ResourceManager.GetString("artefacts_smallRepairkit_restriction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +25% to view range for a stationary vehicle,
        ///up to 500 m.
        /// </summary>
        public static string artefacts_stereoscope_descr {
            get {
                return ResourceManager.GetString("artefacts_stereoscope_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Binocular Telescope.
        /// </summary>
        public static string artefacts_stereoscope_name {
            get {
                return ResourceManager.GetString("artefacts_stereoscope_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +25% to repair speed.
        /// </summary>
        public static string artefacts_toolbox_descr {
            get {
                return ResourceManager.GetString("artefacts_toolbox_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Toolbox.
        /// </summary>
        public static string artefacts_toolbox_name {
            get {
                return ResourceManager.GetString("artefacts_toolbox_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &quot;Wet&quot; Ammo Rack Class 1.
        /// </summary>
        public static string artefacts_wetCombatPack_class1_name {
            get {
                return ResourceManager.GetString("artefacts_wetCombatPack_class1_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &quot;Wet&quot; Ammo Rack Class 2.
        /// </summary>
        public static string artefacts_wetCombatPack_class2_name {
            get {
                return ResourceManager.GetString("artefacts_wetCombatPack_class2_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на +50% ammo rack durability.
        /// </summary>
        public static string artefacts_wetCombatPack_descr {
            get {
                return ResourceManager.GetString("artefacts_wetCombatPack_descr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Clan.
        /// </summary>
        public static string BattleMode_Clan {
            get {
                return ResourceManager.GetString("BattleMode_Clan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle for Stronghold.
        /// </summary>
        public static string BattleMode_FortBattles {
            get {
                return ResourceManager.GetString("BattleMode_FortBattles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Skirmish.
        /// </summary>
        public static string BattleMode_FortSorties {
            get {
                return ResourceManager.GetString("BattleMode_FortSorties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Grand Battle.
        /// </summary>
        public static string BattleMode_GrandBattle {
            get {
                return ResourceManager.GetString("BattleMode_GrandBattle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Historical Battle.
        /// </summary>
        public static string BattleMode_HistoricalBattle {
            get {
                return ResourceManager.GetString("BattleMode_HistoricalBattle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Random, Company.
        /// </summary>
        public static string BattleMode_RandomCompany {
            get {
                return ResourceManager.GetString("BattleMode_RandomCompany", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Team Battle.
        /// </summary>
        public static string BattleMode_TeamBattle {
            get {
                return ResourceManager.GetString("BattleMode_TeamBattle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Defeat.
        /// </summary>
        public static string BattleStatus_Defeat {
            get {
                return ResourceManager.GetString("BattleStatus_Defeat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Draw.
        /// </summary>
        public static string BattleStatus_Draw {
            get {
                return ResourceManager.GetString("BattleStatus_Draw", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No Data.
        /// </summary>
        public static string BattleStatus_Unknown {
            get {
                return ResourceManager.GetString("BattleStatus_Unknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Victory.
        /// </summary>
        public static string BattleStatus_Victory {
            get {
                return ResourceManager.GetString("BattleStatus_Victory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle type.
        /// </summary>
        public static string BattleType {
            get {
                return ResourceManager.GetString("BattleType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Assault.
        /// </summary>
        public static string BattleType_assault {
            get {
                return ResourceManager.GetString("BattleType_assault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Assault.
        /// </summary>
        public static string BattleType_assault2 {
            get {
                return ResourceManager.GetString("BattleType_assault2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Clan War.
        /// </summary>
        public static string BattleType_ClanWar {
            get {
                return ResourceManager.GetString("BattleType_ClanWar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Company War.
        /// </summary>
        public static string BattleType_CompanyWar {
            get {
                return ResourceManager.GetString("BattleType_CompanyWar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Standart battle.
        /// </summary>
        public static string BattleType_ctf {
            get {
                return ResourceManager.GetString("BattleType_ctf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Grand Battle.
        /// </summary>
        public static string BattleType_Ctf30x30 {
            get {
                return ResourceManager.GetString("BattleType_Ctf30x30", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cyber Sport.
        /// </summary>
        public static string BattleType_CyberSport {
            get {
                return ResourceManager.GetString("BattleType_CyberSport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Encounter battle.
        /// </summary>
        public static string BattleType_domination {
            get {
                return ResourceManager.GetString("BattleType_domination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Event Battle.
        /// </summary>
        public static string BattleType_Event {
            get {
                return ResourceManager.GetString("BattleType_Event", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle for Stronghold.
        /// </summary>
        public static string BattleType_FortBattles {
            get {
                return ResourceManager.GetString("BattleType_FortBattles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Grand Battle.
        /// </summary>
        public static string BattleType_GrandBattle {
            get {
                return ResourceManager.GetString("BattleType_GrandBattle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Historical battle.
        /// </summary>
        public static string BattleType_Historical {
            get {
                return ResourceManager.GetString("BattleType_Historical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ladder.
        /// </summary>
        public static string BattleType_Ladder {
            get {
                return ResourceManager.GetString("BattleType_Ladder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Confrontation.
        /// </summary>
        public static string BattleType_nations {
            get {
                return ResourceManager.GetString("BattleType_nations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Random battle.
        /// </summary>
        public static string BattleType_Regular {
            get {
                return ResourceManager.GetString("BattleType_Regular", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Skirmish.
        /// </summary>
        public static string BattleType_Sorties {
            get {
                return ResourceManager.GetString("BattleType_Sorties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tournament.
        /// </summary>
        public static string BattleType_Tournament {
            get {
                return ResourceManager.GetString("BattleType_Tournament", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Training.
        /// </summary>
        public static string BattleType_Training {
            get {
                return ResourceManager.GetString("BattleType_Training", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tutorial.
        /// </summary>
        public static string BattleType_Tutorial {
            get {
                return ResourceManager.GetString("BattleType_Tutorial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All.
        /// </summary>
        public static string Btn_All {
            get {
                return ResourceManager.GetString("Btn_All", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Clear.
        /// </summary>
        public static string Btn_Clear {
            get {
                return ResourceManager.GetString("Btn_Clear", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Compare.
        /// </summary>
        public static string Btn_ComparePlayers {
            get {
                return ResourceManager.GetString("Btn_ComparePlayers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Simulation.
        /// </summary>
        public static string Btn_Play {
            get {
                return ResourceManager.GetString("Btn_Play", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Refresh.
        /// </summary>
        public static string Btn_Refresh {
            get {
                return ResourceManager.GetString("Btn_Refresh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Search.
        /// </summary>
        public static string Btn_Search {
            get {
                return ResourceManager.GetString("Btn_Search", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Check Update.
        /// </summary>
        public static string ButtonCheckUpdate {
            get {
                return ResourceManager.GetString("ButtonCheckUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ok.
        /// </summary>
        public static string ButtonOk {
            get {
                return ResourceManager.GetString("ButtonOk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на System Info.
        /// </summary>
        public static string ButtonSysInfo {
            get {
                return ResourceManager.GetString("ButtonSysInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Damage.
        /// </summary>
        public static string Chart_AvgDamage {
            get {
                return ResourceManager.GetString("Chart_AvgDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Spotted.
        /// </summary>
        public static string Chart_AvgSpotted {
            get {
                return ResourceManager.GetString("Chart_AvgSpotted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average XP.
        /// </summary>
        public static string Chart_AvgXp {
            get {
                return ResourceManager.GetString("Chart_AvgXp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles by country.
        /// </summary>
        public static string Chart_BattlesByCountry {
            get {
                return ResourceManager.GetString("Chart_BattlesByCountry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles by Tier.
        /// </summary>
        public static string Chart_BattlesByTier {
            get {
                return ResourceManager.GetString("Chart_BattlesByTier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles by Type.
        /// </summary>
        public static string Chart_BattlesByType {
            get {
                return ResourceManager.GetString("Chart_BattlesByType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на WN8 by country.
        /// </summary>
        public static string Chart_EffByCountry {
            get {
                return ResourceManager.GetString("Chart_EffByCountry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на WN8 by Tier.
        /// </summary>
        public static string Chart_EffByTier {
            get {
                return ResourceManager.GetString("Chart_EffByTier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на WN8 by Type.
        /// </summary>
        public static string Chart_EffByType {
            get {
                return ResourceManager.GetString("Chart_EffByType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Effectivity Rating.
        /// </summary>
        public static string Chart_EffectivityRating {
            get {
                return ResourceManager.GetString("Chart_EffectivityRating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Kill/Death Ratio.
        /// </summary>
        public static string Chart_KillDeathRatio {
            get {
                return ResourceManager.GetString("Chart_KillDeathRatio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All bases.
        /// </summary>
        public static string Chart_Label_AllBases {
            get {
                return ResourceManager.GetString("Chart_Label_AllBases", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Base 1.
        /// </summary>
        public static string Chart_Label_Base1 {
            get {
                return ResourceManager.GetString("Chart_Label_Base1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Base 2.
        /// </summary>
        public static string Chart_Label_Base2 {
            get {
                return ResourceManager.GetString("Chart_Label_Base2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Settings.
        /// </summary>
        public static string Chart_Label_Settings {
            get {
                return ResourceManager.GetString("Chart_Label_Settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Total: {0:0}.
        /// </summary>
        public static string Chart_Replays_Total_Count {
            get {
                return ResourceManager.GetString("Chart_Replays_Total_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Total: {0:0.0}%.
        /// </summary>
        public static string Chart_Replays_Total_Win_Percent {
            get {
                return ResourceManager.GetString("Chart_Replays_Total_Win_Percent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Replays count.
        /// </summary>
        public static string Chart_ReplaysCountByMap {
            get {
                return ResourceManager.GetString("Chart_ReplaysCountByMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survive %.
        /// </summary>
        public static string Chart_SurvivePercent {
            get {
                return ResourceManager.GetString("Chart_SurvivePercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles: {0}
        ///Avg Spotted: {1:0.00}
        ///Date: {2:dd.MM.yyyy}.
        /// </summary>
        public static string Chart_Tooltip_AvgSpotted {
            get {
                return ResourceManager.GetString("Chart_Tooltip_AvgSpotted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles: {0}
        ///Avg XP: {1:0.00}
        ///Date: {2:dd.MM.yyyy}.
        /// </summary>
        public static string Chart_Tooltip_AvgXp {
            get {
                return ResourceManager.GetString("Chart_Tooltip_AvgXp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles:.
        /// </summary>
        public static string Chart_Tooltip_Battles {
            get {
                return ResourceManager.GetString("Chart_Tooltip_Battles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles: {0}
        ///Ratio: {1:0.00}
        ///Date: {2:dd.MM.yyyy}.
        /// </summary>
        public static string Chart_Tooltip_KillDeathRatio {
            get {
                return ResourceManager.GetString("Chart_Tooltip_KillDeathRatio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles: {0}
        ///Survive %: {1:0.00}
        ///Date: {2:dd.MM.yyyy}.
        /// </summary>
        public static string Chart_Tooltip_Survive {
            get {
                return ResourceManager.GetString("Chart_Tooltip_Survive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tank:.
        /// </summary>
        public static string Chart_Tooltip_Tank {
            get {
                return ResourceManager.GetString("Chart_Tooltip_Tank", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Win %:.
        /// </summary>
        public static string Chart_Tooltip_WinPercent {
            get {
                return ResourceManager.GetString("Chart_Tooltip_WinPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Avg. Damage: {4:0}
        ///{1}: {2:0}
        ///Date: {Date:dd.MM.yyyy}.
        /// </summary>
        public static string Chart_TrackerFormatString_AvgDamage {
            get {
                return ResourceManager.GetString("Chart_TrackerFormatString_AvgDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Avg. Spotted: {4:0.00}
        ///{1}: {2:0}
        ///Date: {Date:dd.MM.yyyy}.
        /// </summary>
        public static string Chart_TrackerFormatString_AvgSpotted {
            get {
                return ResourceManager.GetString("Chart_TrackerFormatString_AvgSpotted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Avg. XP: {4:0.0}
        ///{1}: {2:0}
        ///Date: {Date:dd.MM.yyyy}.
        /// </summary>
        public static string Chart_TrackerFormatString_AvgXp {
            get {
                return ResourceManager.GetString("Chart_TrackerFormatString_AvgXp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на EFF: {4:0.0}
        ///{1}: {2:0}
        ///Date: {Date:dd.MM.yyyy}.
        /// </summary>
        public static string Chart_TrackerFormatString_Eff {
            get {
                return ResourceManager.GetString("Chart_TrackerFormatString_Eff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Kill Death Ratio: {4:0.00}
        ///{1}: {2:0}
        ///Date: {Date:dd.MM.yyyy}.
        /// </summary>
        public static string Chart_TrackerFormatString_KillDeathRatio {
            get {
                return ResourceManager.GetString("Chart_TrackerFormatString_KillDeathRatio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survive Percent: {4:0.00}
        ///{1}: {2:0}
        ///Date: {Date:dd.MM.yyyy}.
        /// </summary>
        public static string Chart_TrackerFormatString_SurvivePercent {
            get {
                return ResourceManager.GetString("Chart_TrackerFormatString_SurvivePercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Win Percent: {4:0.00}
        ///{1}: {2:0}
        ///Date: {Date:dd.MM.yyyy}.
        /// </summary>
        public static string Chart_TrackerFormatString_WinRate {
            get {
                return ResourceManager.GetString("Chart_TrackerFormatString_WinRate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на WN8: {4:0.0}
        ///{1}: {2:0}
        ///Date: {Date:dd.MM.yyyy}.
        /// </summary>
        public static string Chart_TrackerFormatString_Wn8 {
            get {
                return ResourceManager.GetString("Chart_TrackerFormatString_Wn8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Win %.
        /// </summary>
        public static string Chart_WinPercent {
            get {
                return ResourceManager.GetString("Chart_WinPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Win % by country.
        /// </summary>
        public static string Chart_WinPercentByCountry {
            get {
                return ResourceManager.GetString("Chart_WinPercentByCountry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Win % by Tier.
        /// </summary>
        public static string Chart_WinPercentByTier {
            get {
                return ResourceManager.GetString("Chart_WinPercentByTier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Win % by Type.
        /// </summary>
        public static string Chart_WinPercentByType {
            get {
                return ResourceManager.GetString("Chart_WinPercentByType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Win replays percent.
        /// </summary>
        public static string Chart_WinReplaysPercentByMap {
            get {
                return ResourceManager.GetString("Chart_WinReplaysPercentByMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rating WN6.
        /// </summary>
        public static string Chart_WN6Rating {
            get {
                return ResourceManager.GetString("Chart_WN6Rating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Avg damage.
        /// </summary>
        public static string ChartLegend_AvgDamage {
            get {
                return ResourceManager.GetString("ChartLegend_AvgDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Effectivity Rating.
        /// </summary>
        public static string ChartLegend_ER {
            get {
                return ResourceManager.GetString("ChartLegend_ER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Win %.
        /// </summary>
        public static string ChartLegend_WinPercent {
            get {
                return ResourceManager.GetString("ChartLegend_WinPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles: {0}
        ///Avg Damage: {1:0.00}
        ///Date: {2:dd.MM.yyyy}.
        /// </summary>
        public static string ChartTooltipFormat_AvgDamage {
            get {
                return ResourceManager.GetString("ChartTooltipFormat_AvgDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles: {0}
        ///Rating: {1:0.00}
        ///Date: {2:dd.MM.yyyy}.
        /// </summary>
        public static string ChartTooltipFormat_Rating {
            get {
                return ResourceManager.GetString("ChartTooltipFormat_Rating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles: {0}
        ///Win percent: {1:0.00}
        ///Date: {2:dd.MM.yyyy}.
        /// </summary>
        public static string ChartTooltipFormat_WinPercent {
            get {
                return ResourceManager.GetString("ChartTooltipFormat_WinPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string Clan_Name {
            get {
                return ResourceManager.GetString("Clan_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Role.
        /// </summary>
        public static string Clan_Role {
            get {
                return ResourceManager.GetString("Clan_Role", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Since.
        /// </summary>
        public static string Clan_Since {
            get {
                return ResourceManager.GetString("Clan_Since", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на For province.
        /// </summary>
        public static string ClanBattleType_for_province {
            get {
                return ResourceManager.GetString("ClanBattleType_for_province", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Landing.
        /// </summary>
        public static string ClanBattleType_landing {
            get {
                return ResourceManager.GetString("ClanBattleType_landing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Meeting engagement.
        /// </summary>
        public static string ClanBattleType_meeting_engagement {
            get {
                return ResourceManager.GetString("ClanBattleType_meeting_engagement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Can&apos;t get or save player clan icon from server.
        /// </summary>
        public static string ClanImageUrlToSourceConverter_Convert_Can_t_get_or_save_player_clan_icon_from_server {
            get {
                return ResourceManager.GetString("ClanImageUrlToSourceConverter_Convert_Can_t_get_or_save_player_clan_icon_from_ser" +
                        "ver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle Hero.
        /// </summary>
        public static string Column_BattleAwards_BattleHero {
            get {
                return ResourceManager.GetString("Column_BattleAwards_BattleHero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles.
        /// </summary>
        public static string Column_Battles_Battles {
            get {
                return ResourceManager.GetString("Column_Battles_Battles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Draws.
        /// </summary>
        public static string Column_Battles_Draws {
            get {
                return ResourceManager.GetString("Column_Battles_Draws", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Draws %.
        /// </summary>
        public static string Column_Battles_DrawsPercent {
            get {
                return ResourceManager.GetString("Column_Battles_DrawsPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Lost.
        /// </summary>
        public static string Column_Battles_Lost {
            get {
                return ResourceManager.GetString("Column_Battles_Lost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Lost %.
        /// </summary>
        public static string Column_Battles_LostPercent {
            get {
                return ResourceManager.GetString("Column_Battles_LostPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survived.
        /// </summary>
        public static string Column_Battles_Survived {
            get {
                return ResourceManager.GetString("Column_Battles_Survived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survived And Won.
        /// </summary>
        public static string Column_Battles_SurvivedAndWon {
            get {
                return ResourceManager.GetString("Column_Battles_SurvivedAndWon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survived And Won %.
        /// </summary>
        public static string Column_Battles_SurvivedAndWonPercent {
            get {
                return ResourceManager.GetString("Column_Battles_SurvivedAndWonPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survived %.
        /// </summary>
        public static string Column_Battles_SurvivedPercent {
            get {
                return ResourceManager.GetString("Column_Battles_SurvivedPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Won.
        /// </summary>
        public static string Column_Battles_Won {
            get {
                return ResourceManager.GetString("Column_Battles_Won", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на WonPercent.
        /// </summary>
        public static string Column_Battles_WonPercent {
            get {
                return ResourceManager.GetString("Column_Battles_WonPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Bottom 3-5-7.
        /// </summary>
        public static string Column_Bottom_3_5_7 {
            get {
                return ResourceManager.GetString("Column_Bottom_3_5_7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Bottom 5-10.
        /// </summary>
        public static string Column_Bottom_5_10 {
            get {
                return ResourceManager.GetString("Column_Bottom_5_10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Damage Dealt.
        /// </summary>
        public static string Column_Damage_AverageDamageDealt {
            get {
                return ResourceManager.GetString("Column_Damage_AverageDamageDealt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Avg Damage Taken.
        /// </summary>
        public static string Column_Damage_AvgDamageTaken {
            get {
                return ResourceManager.GetString("Column_Damage_AvgDamageTaken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage Dealt.
        /// </summary>
        public static string Column_Damage_DamageDealt {
            get {
                return ResourceManager.GetString("Column_Damage_DamageDealt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage Per Hit.
        /// </summary>
        public static string Column_Damage_DamagePerHit {
            get {
                return ResourceManager.GetString("Column_Damage_DamagePerHit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage Ratio.
        /// </summary>
        public static string Column_Damage_DamageRatio {
            get {
                return ResourceManager.GetString("Column_Damage_DamageRatio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage Taken.
        /// </summary>
        public static string Column_Damage_DamageTaken {
            get {
                return ResourceManager.GetString("Column_Damage_DamageTaken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Max damage.
        /// </summary>
        public static string Column_Damage_MaxDamage {
            get {
                return ResourceManager.GetString("Column_Damage_MaxDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Count.
        /// </summary>
        public static string Column_FragCounts_Count {
            get {
                return ResourceManager.GetString("Column_FragCounts_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на AvgFrags.
        /// </summary>
        public static string Column_Frags_AvgFrags {
            get {
                return ResourceManager.GetString("Column_Frags_AvgFrags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles.
        /// </summary>
        public static string Column_Frags_Battles {
            get {
                return ResourceManager.GetString("Column_Frags_Battles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Beast Frags.
        /// </summary>
        public static string Column_Frags_BeastFrags {
            get {
                return ResourceManager.GetString("Column_Frags_BeastFrags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Frags.
        /// </summary>
        public static string Column_Frags_Frags {
            get {
                return ResourceManager.GetString("Column_Frags_Frags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Kill Death Ratio.
        /// </summary>
        public static string Column_Frags_KillDeathRatio {
            get {
                return ResourceManager.GetString("Column_Frags_KillDeathRatio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Mause Frags.
        /// </summary>
        public static string Column_Frags_MauseFrags {
            get {
                return ResourceManager.GetString("Column_Frags_MauseFrags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Max Frags.
        /// </summary>
        public static string Column_Frags_MaxFrags {
            get {
                return ResourceManager.GetString("Column_Frags_MaxFrags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Patton Frags.
        /// </summary>
        public static string Column_Frags_PattonFrags {
            get {
                return ResourceManager.GetString("Column_Frags_PattonFrags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на SinaiFrags.
        /// </summary>
        public static string Column_Frags_SinaiFrags {
            get {
                return ResourceManager.GetString("Column_Frags_SinaiFrags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tier8Frags.
        /// </summary>
        public static string Column_Frags_Tier8Frags {
            get {
                return ResourceManager.GetString("Column_Frags_Tier8Frags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Attacker.
        /// </summary>
        public static string Column_Header_Attacker {
            get {
                return ResourceManager.GetString("Column_Header_Attacker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Defender.
        /// </summary>
        public static string Column_Header_Defender {
            get {
                return ResourceManager.GetString("Column_Header_Defender", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Global map identifier.
        /// </summary>
        public static string Column_Header_GlobalMap {
            get {
                return ResourceManager.GetString("Column_Header_GlobalMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Icon.
        /// </summary>
        public static string Column_Header_Icon {
            get {
                return ResourceManager.GetString("Column_Header_Icon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Map.
        /// </summary>
        public static string Column_Header_Map {
            get {
                return ResourceManager.GetString("Column_Header_Map", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Provinces.
        /// </summary>
        public static string Column_Header_Provinces {
            get {
                return ResourceManager.GetString("Column_Header_Provinces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tank.
        /// </summary>
        public static string Column_Header_Tank {
            get {
                return ResourceManager.GetString("Column_Header_Tank", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tier.
        /// </summary>
        public static string Column_Header_Tier {
            get {
                return ResourceManager.GetString("Column_Header_Tier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Time.
        /// </summary>
        public static string Column_Header_Time {
            get {
                return ResourceManager.GetString("Column_Header_Time", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Type.
        /// </summary>
        public static string Column_Header_Type {
            get {
                return ResourceManager.GetString("Column_Header_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Is premium tank.
        /// </summary>
        public static string Column_MasterTanker_IsPremium {
            get {
                return ResourceManager.GetString("Column_MasterTanker_IsPremium", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на One level.
        /// </summary>
        public static string Column_One_Level {
            get {
                return ResourceManager.GetString("Column_One_Level", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Damage Assisted.
        /// </summary>
        public static string Column_Performance_AvgDamageAssisted {
            get {
                return ResourceManager.GetString("Column_Performance_AvgDamageAssisted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Damage Assisted Radio.
        /// </summary>
        public static string Column_Performance_AvgDamageAssistedRadio {
            get {
                return ResourceManager.GetString("Column_Performance_AvgDamageAssistedRadio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Damage Assisted Stun.
        /// </summary>
        public static string Column_Performance_AvgDamageAssistedStun {
            get {
                return ResourceManager.GetString("Column_Performance_AvgDamageAssistedStun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Damage Assisted Track.
        /// </summary>
        public static string Column_Performance_AvgDamageAssistedTrack {
            get {
                return ResourceManager.GetString("Column_Performance_AvgDamageAssistedTrack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Damage blocked by armor.
        /// </summary>
        public static string Column_Performance_AvgDamageBlockedByArmor {
            get {
                return ResourceManager.GetString("Column_Performance_AvgDamageBlockedByArmor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Original XP.
        /// </summary>
        public static string Column_Performance_AvgOriginalXP {
            get {
                return ResourceManager.GetString("Column_Performance_AvgOriginalXP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Potential damage received.
        /// </summary>
        public static string Column_Performance_AvgPotentialDamageReceived {
            get {
                return ResourceManager.GetString("Column_Performance_AvgPotentialDamageReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles Count 8.8.
        /// </summary>
        public static string Column_Performance_BattlesCount88 {
            get {
                return ResourceManager.GetString("Column_Performance_BattlesCount88", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles Count Before 8.8.
        /// </summary>
        public static string Column_Performance_BattlesCountBefore88 {
            get {
                return ResourceManager.GetString("Column_Performance_BattlesCountBefore88", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Capture Points.
        /// </summary>
        public static string Column_Performance_CapturePoints {
            get {
                return ResourceManager.GetString("Column_Performance_CapturePoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage Assisted.
        /// </summary>
        public static string Column_Performance_DamageAssisted {
            get {
                return ResourceManager.GetString("Column_Performance_DamageAssisted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage Assisted Radio.
        /// </summary>
        public static string Column_Performance_DamageAssistedRadio {
            get {
                return ResourceManager.GetString("Column_Performance_DamageAssistedRadio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage Assisted Stun.
        /// </summary>
        public static string Column_Performance_DamageAssistedStun {
            get {
                return ResourceManager.GetString("Column_Performance_DamageAssistedStun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage Assisted Track.
        /// </summary>
        public static string Column_Performance_DamageAssistedTrack {
            get {
                return ResourceManager.GetString("Column_Performance_DamageAssistedTrack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage blocked by armor.
        /// </summary>
        public static string Column_Performance_DamageBlockedByArmor {
            get {
                return ResourceManager.GetString("Column_Performance_DamageBlockedByArmor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Defence Points.
        /// </summary>
        public static string Column_Performance_DefencePoints {
            get {
                return ResourceManager.GetString("Column_Performance_DefencePoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на He Hits.
        /// </summary>
        public static string Column_Performance_HeHits {
            get {
                return ResourceManager.GetString("Column_Performance_HeHits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на He Hits Received.
        /// </summary>
        public static string Column_Performance_HeHitsReceived {
            get {
                return ResourceManager.GetString("Column_Performance_HeHitsReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Hit Ratio.
        /// </summary>
        public static string Column_Performance_HitRatio {
            get {
                return ResourceManager.GetString("Column_Performance_HitRatio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Hits.
        /// </summary>
        public static string Column_Performance_Hits {
            get {
                return ResourceManager.GetString("Column_Performance_Hits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Mileage, km.
        /// </summary>
        public static string Column_Performance_Mileage {
            get {
                return ResourceManager.GetString("Column_Performance_Mileage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No Damage Shots Received.
        /// </summary>
        public static string Column_Performance_NoDamageShotsReceived {
            get {
                return ResourceManager.GetString("Column_Performance_NoDamageShotsReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Original XP.
        /// </summary>
        public static string Column_Performance_OriginalXP {
            get {
                return ResourceManager.GetString("Column_Performance_OriginalXP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pierced.
        /// </summary>
        public static string Column_Performance_Pierced {
            get {
                return ResourceManager.GetString("Column_Performance_Pierced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pierced Received.
        /// </summary>
        public static string Column_Performance_PiercedReceived {
            get {
                return ResourceManager.GetString("Column_Performance_PiercedReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Potential damage received.
        /// </summary>
        public static string Column_Performance_PotentialDamageReceived {
            get {
                return ResourceManager.GetString("Column_Performance_PotentialDamageReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Shots.
        /// </summary>
        public static string Column_Performance_Shots {
            get {
                return ResourceManager.GetString("Column_Performance_Shots", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Shots Received.
        /// </summary>
        public static string Column_Performance_ShotsReceived {
            get {
                return ResourceManager.GetString("Column_Performance_ShotsReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tanks Spotted.
        /// </summary>
        public static string Column_Performance_TanksSpotted {
            get {
                return ResourceManager.GetString("Column_Performance_TanksSpotted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Xp Before 8.8.
        /// </summary>
        public static string Column_Performance_XpBefore88 {
            get {
                return ResourceManager.GetString("Column_Performance_XpBefore88", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Damage.
        /// </summary>
        public static string Column_Ratings_AverageDamage {
            get {
                return ResourceManager.GetString("Column_Ratings_AverageDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles.
        /// </summary>
        public static string Column_Ratings_Battles {
            get {
                return ResourceManager.GetString("Column_Ratings_Battles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage Rating.
        /// </summary>
        public static string Column_Ratings_DamageRating {
            get {
                return ResourceManager.GetString("Column_Ratings_DamageRating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage Rating Rev1.
        /// </summary>
        public static string Column_Ratings_DamageRatingRev1 {
            get {
                return ResourceManager.GetString("Column_Ratings_DamageRatingRev1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Eff Rating.
        /// </summary>
        public static string Column_Ratings_EffRating {
            get {
                return ResourceManager.GetString("Column_Ratings_EffRating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Kiev Armor Rating.
        /// </summary>
        public static string Column_Ratings_KievArmorRating {
            get {
                return ResourceManager.GetString("Column_Ratings_KievArmorRating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Kill Death Ratio.
        /// </summary>
        public static string Column_Ratings_KillDeathRatio {
            get {
                return ResourceManager.GetString("Column_Ratings_KillDeathRatio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Mark Of Mastery.
        /// </summary>
        public static string Column_Ratings_MarkOfMastery {
            get {
                return ResourceManager.GetString("Column_Ratings_MarkOfMastery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Performance Rating.
        /// </summary>
        public static string Column_Ratings_PerformanceRating {
            get {
                return ResourceManager.GetString("Column_Ratings_PerformanceRating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Platoon.
        /// </summary>
        public static string Column_Ratings_Platoon {
            get {
                return ResourceManager.GetString("Column_Ratings_Platoon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Winrate.
        /// </summary>
        public static string Column_Ratings_Winrate {
            get {
                return ResourceManager.GetString("Column_Ratings_Winrate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Achievements.
        /// </summary>
        public static string Column_Replay_Achievements {
            get {
                return ResourceManager.GetString("Column_Replay_Achievements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Result.
        /// </summary>
        public static string Column_Replay_BattleResult {
            get {
                return ResourceManager.GetString("Column_Replay_BattleResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Credits.
        /// </summary>
        public static string Column_Replay_Credits {
            get {
                return ResourceManager.GetString("Column_Replay_Credits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Earned.
        /// </summary>
        public static string Column_Replay_CreditsEarned {
            get {
                return ResourceManager.GetString("Column_Replay_CreditsEarned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crystal.
        /// </summary>
        public static string Column_Replay_Crystal {
            get {
                return ResourceManager.GetString("Column_Replay_Crystal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damaged.
        /// </summary>
        public static string Column_Replay_Damaged {
            get {
                return ResourceManager.GetString("Column_Replay_Damaged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage Dealt.
        /// </summary>
        public static string Column_Replay_DamageDealt {
            get {
                return ResourceManager.GetString("Column_Replay_DamageDealt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage Received.
        /// </summary>
        public static string Column_Replay_DamageReceived {
            get {
                return ResourceManager.GetString("Column_Replay_DamageReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Frags.
        /// </summary>
        public static string Column_Replay_Frags {
            get {
                return ResourceManager.GetString("Column_Replay_Frags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Link.
        /// </summary>
        public static string Column_Replay_Link {
            get {
                return ResourceManager.GetString("Column_Replay_Link", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Platoon.
        /// </summary>
        public static string Column_Replay_Platoon {
            get {
                return ResourceManager.GetString("Column_Replay_Platoon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Player Name.
        /// </summary>
        public static string Column_Replay_PlayerName {
            get {
                return ResourceManager.GetString("Column_Replay_PlayerName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Stuns.
        /// </summary>
        public static string Column_Replay_Stun {
            get {
                return ResourceManager.GetString("Column_Replay_Stun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на XP.
        /// </summary>
        public static string Column_Replay_XP {
            get {
                return ResourceManager.GetString("Column_Replay_XP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Spawn.
        /// </summary>
        public static string Column_Respawn {
            get {
                return ResourceManager.GetString("Column_Respawn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invincible Longest.
        /// </summary>
        public static string Column_Series_InvincibleLongest {
            get {
                return ResourceManager.GetString("Column_Series_InvincibleLongest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invincible Progress.
        /// </summary>
        public static string Column_Series_InvincibleProgress {
            get {
                return ResourceManager.GetString("Column_Series_InvincibleProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Master Gunner Longest.
        /// </summary>
        public static string Column_Series_MasterGunnerLongest {
            get {
                return ResourceManager.GetString("Column_Series_MasterGunnerLongest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Master Gunner Progress.
        /// </summary>
        public static string Column_Series_MasterGunnerProgress {
            get {
                return ResourceManager.GetString("Column_Series_MasterGunnerProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reaper Longest.
        /// </summary>
        public static string Column_Series_ReaperLongest {
            get {
                return ResourceManager.GetString("Column_Series_ReaperLongest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reaper Progress.
        /// </summary>
        public static string Column_Series_ReaperProgress {
            get {
                return ResourceManager.GetString("Column_Series_ReaperProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sharpshooter Longest.
        /// </summary>
        public static string Column_Series_SharpshooterLongest {
            get {
                return ResourceManager.GetString("Column_Series_SharpshooterLongest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sharpshooter Progress.
        /// </summary>
        public static string Column_Series_SharpshooterProgress {
            get {
                return ResourceManager.GetString("Column_Series_SharpshooterProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survivor Longest.
        /// </summary>
        public static string Column_Series_SurvivorLongest {
            get {
                return ResourceManager.GetString("Column_Series_SurvivorLongest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survivor Progress.
        /// </summary>
        public static string Column_Series_SurvivorProgress {
            get {
                return ResourceManager.GetString("Column_Series_SurvivorProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Path.
        /// </summary>
        public static string Column_Settings_Path {
            get {
                return ResourceManager.GetString("Column_Settings_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Version.
        /// </summary>
        public static string Column_Settings_Version {
            get {
                return ResourceManager.GetString("Column_Settings_Version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Battle Time.
        /// </summary>
        public static string Column_Time_AverageBattleTime {
            get {
                return ResourceManager.GetString("Column_Time_AverageBattleTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Common Battle Time.
        /// </summary>
        public static string Column_Time_CommonPlayTime {
            get {
                return ResourceManager.GetString("Column_Time_CommonPlayTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Last Battle.
        /// </summary>
        public static string Column_Time_LastBattle {
            get {
                return ResourceManager.GetString("Column_Time_LastBattle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Play Time.
        /// </summary>
        public static string Column_Time_PlayTime {
            get {
                return ResourceManager.GetString("Column_Time_PlayTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Top.
        /// </summary>
        public static string Column_Top {
            get {
                return ResourceManager.GetString("Column_Top", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Top 3-5-7.
        /// </summary>
        public static string Column_Top_3_5_7 {
            get {
                return ResourceManager.GetString("Column_Top_3_5_7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Top 5-10.
        /// </summary>
        public static string Column_Top_5_10 {
            get {
                return ResourceManager.GetString("Column_Top_5_10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average XP.
        /// </summary>
        public static string Column_XP_AverageXP {
            get {
                return ResourceManager.GetString("Column_XP_AverageXP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Maximum XP.
        /// </summary>
        public static string Column_XP_MaximumXP {
            get {
                return ResourceManager.GetString("Column_XP_MaximumXP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Total XP.
        /// </summary>
        public static string Column_XP_TotalXP {
            get {
                return ResourceManager.GetString("Column_XP_TotalXP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Add folder.
        /// </summary>
        public static string Command_AddFolder {
            get {
                return ResourceManager.GetString("Command_AddFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Add to Favorites.
        /// </summary>
        public static string Command_AddToFavorites {
            get {
                return ResourceManager.GetString("Command_AddToFavorites", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete folder.
        /// </summary>
        public static string Command_DeleteFolder {
            get {
                return ResourceManager.GetString("Command_DeleteFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Remove from Favorites.
        /// </summary>
        public static string Command_RemoveFromFavorites {
            get {
                return ResourceManager.GetString("Command_RemoveFromFavorites", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pack.
        /// </summary>
        public static string Command_ZipFolder {
            get {
                return ResourceManager.GetString("Command_ZipFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average tier.
        /// </summary>
        public static string Common_AverageTier {
            get {
                return ResourceManager.GetString("Common_AverageTier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Capture Points:.
        /// </summary>
        public static string Common_AvgCapturePoints {
            get {
                return ResourceManager.GetString("Common_AvgCapturePoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Damage Caused:.
        /// </summary>
        public static string Common_AvgDamageCaused {
            get {
                return ResourceManager.GetString("Common_AvgDamageCaused", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Defense Points:.
        /// </summary>
        public static string Common_AvgDefensePoints {
            get {
                return ResourceManager.GetString("Common_AvgDefensePoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Destroyed:.
        /// </summary>
        public static string Common_AvgDestroyed {
            get {
                return ResourceManager.GetString("Common_AvgDestroyed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Detected:.
        /// </summary>
        public static string Common_AvgDetected {
            get {
                return ResourceManager.GetString("Common_AvgDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Experience per Battle: .
        /// </summary>
        public static string Common_AvgExperience {
            get {
                return ResourceManager.GetString("Common_AvgExperience", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle Performance.
        /// </summary>
        public static string Common_BattlePerformance {
            get {
                return ResourceManager.GetString("Common_BattlePerformance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles Participated: .
        /// </summary>
        public static string Common_BattlesParticipated {
            get {
                return ResourceManager.GetString("Common_BattlesParticipated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles per day.
        /// </summary>
        public static string Common_BattlesPerDay {
            get {
                return ResourceManager.GetString("Common_BattlesPerDay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles Survived:.
        /// </summary>
        public static string Common_BattlesSurvived {
            get {
                return ResourceManager.GetString("Common_BattlesSurvived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Capture Points: .
        /// </summary>
        public static string Common_CapturePoints {
            get {
                return ResourceManager.GetString("Common_CapturePoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Chat.
        /// </summary>
        public static string Common_Chat {
            get {
                return ResourceManager.GetString("Common_Chat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Days in clan: .
        /// </summary>
        public static string Common_Clan_DaysInClan {
            get {
                return ResourceManager.GetString("Common_Clan_DaysInClan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enrolled: .
        /// </summary>
        public static string Common_Clan_Enrolled {
            get {
                return ResourceManager.GetString("Common_Clan_Enrolled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Position: .
        /// </summary>
        public static string Common_Clan_Position {
            get {
                return ResourceManager.GetString("Common_Clan_Position", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Consumables.
        /// </summary>
        public static string Common_Consumables {
            get {
                return ResourceManager.GetString("Common_Consumables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage Caused: .
        /// </summary>
        public static string Common_DamageCaused {
            get {
                return ResourceManager.GetString("Common_DamageCaused", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dealt/Received:.
        /// </summary>
        public static string Common_DamageRatio {
            get {
                return ResourceManager.GetString("Common_DamageRatio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Data as of: .
        /// </summary>
        public static string Common_DataUpdate {
            get {
                return ResourceManager.GetString("Common_DataUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Defeats:.
        /// </summary>
        public static string Common_Defeats {
            get {
                return ResourceManager.GetString("Common_Defeats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Defense Points: .
        /// </summary>
        public static string Common_DefensePoints {
            get {
                return ResourceManager.GetString("Common_DefensePoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroyed: .
        /// </summary>
        public static string Common_Destroyed {
            get {
                return ResourceManager.GetString("Common_Destroyed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Detected: .
        /// </summary>
        public static string Common_Detected {
            get {
                return ResourceManager.GetString("Common_Detected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Effectivity Rating.
        /// </summary>
        public static string Common_EffectivityRating {
            get {
                return ResourceManager.GetString("Common_EffectivityRating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Equipment.
        /// </summary>
        public static string Common_Equipment {
            get {
                return ResourceManager.GetString("Common_Equipment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Experience.
        /// </summary>
        public static string Common_Experience {
            get {
                return ResourceManager.GetString("Common_Experience", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Hit Ratio: .
        /// </summary>
        public static string Common_HitRatio {
            get {
                return ResourceManager.GetString("Common_HitRatio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Kiev Armor Rating.
        /// </summary>
        public static string Common_KievArmorRating {
            get {
                return ResourceManager.GetString("Common_KievArmorRating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Kill/Death:.
        /// </summary>
        public static string Common_KillDeathRatio {
            get {
                return ResourceManager.GetString("Common_KillDeathRatio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Maximum Experience per Battle: .
        /// </summary>
        public static string Common_MaxExperience {
            get {
                return ResourceManager.GetString("Common_MaxExperience", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Noobmeter Performance Rating.
        /// </summary>
        public static string Common_NoobmeterPerformanceRating {
            get {
                return ResourceManager.GetString("Common_NoobmeterPerformanceRating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Overall Results.
        /// </summary>
        public static string Common_OverallResults {
            get {
                return ResourceManager.GetString("Common_OverallResults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Play time.
        /// </summary>
        public static string Common_PlayTime {
            get {
                return ResourceManager.GetString("Common_PlayTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Experience per Battle.
        /// </summary>
        public static string Common_Rating_AvgExperience {
            get {
                return ResourceManager.GetString("Common_Rating_AvgExperience", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles Participated.
        /// </summary>
        public static string Common_Rating_BattlesParticipated {
            get {
                return ResourceManager.GetString("Common_Rating_BattlesParticipated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Capture Points.
        /// </summary>
        public static string Common_Rating_CapturePoints {
            get {
                return ResourceManager.GetString("Common_Rating_CapturePoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage Caused.
        /// </summary>
        public static string Common_Rating_DamageCaused {
            get {
                return ResourceManager.GetString("Common_Rating_DamageCaused", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Defense Points.
        /// </summary>
        public static string Common_Rating_DefensePoints {
            get {
                return ResourceManager.GetString("Common_Rating_DefensePoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Global Rating.
        /// </summary>
        public static string Common_Rating_GlobalRating {
            get {
                return ResourceManager.GetString("Common_Rating_GlobalRating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Hits percent.
        /// </summary>
        public static string Common_Rating_HitsPercent {
            get {
                return ResourceManager.GetString("Common_Rating_HitsPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Max XP.
        /// </summary>
        public static string Common_Rating_MaxXP {
            get {
                return ResourceManager.GetString("Common_Rating_MaxXP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Personal Rating.
        /// </summary>
        public static string Common_Rating_Personal {
            get {
                return ResourceManager.GetString("Common_Rating_Personal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Targets Destroyed.
        /// </summary>
        public static string Common_Rating_TargetsDestroyed {
            get {
                return ResourceManager.GetString("Common_Rating_TargetsDestroyed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Targets Detected.
        /// </summary>
        public static string Common_Rating_TargetsDetected {
            get {
                return ResourceManager.GetString("Common_Rating_TargetsDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Total Experience.
        /// </summary>
        public static string Common_Rating_TotalExperience {
            get {
                return ResourceManager.GetString("Common_Rating_TotalExperience", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Victories.
        /// </summary>
        public static string Common_Rating_Victories {
            get {
                return ResourceManager.GetString("Common_Rating_Victories", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Victories/Battles.
        /// </summary>
        public static string Common_Rating_VictoriesBattles {
            get {
                return ResourceManager.GetString("Common_Rating_VictoriesBattles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Place.
        /// </summary>
        public static string Common_RatingHeader_Place {
            get {
                return ResourceManager.GetString("Common_RatingHeader_Place", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rating.
        /// </summary>
        public static string Common_RatingHeader_Rating {
            get {
                return ResourceManager.GetString("Common_RatingHeader_Rating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Value.
        /// </summary>
        public static string Common_RatingHeader_Value {
            get {
                return ResourceManager.GetString("Common_RatingHeader_Value", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Registered: .
        /// </summary>
        public static string Common_RegisterDate {
            get {
                return ResourceManager.GetString("Common_RegisterDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Shells.
        /// </summary>
        public static string Common_Shells {
            get {
                return ResourceManager.GetString("Common_Shells", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Total Experience: .
        /// </summary>
        public static string Common_TotalExperience {
            get {
                return ResourceManager.GetString("Common_TotalExperience", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Victories:.
        /// </summary>
        public static string Common_Victories {
            get {
                return ResourceManager.GetString("Common_Victories", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rating WG.
        /// </summary>
        public static string Common_WGRating {
            get {
                return ResourceManager.GetString("Common_WGRating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на WN6 Rating.
        /// </summary>
        public static string Common_Wn6Rating {
            get {
                return ResourceManager.GetString("Common_Wn6Rating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rating wot-noobs.ru.
        /// </summary>
        public static string Common_WotNoobsRating {
            get {
                return ResourceManager.GetString("Common_WotNoobsRating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на China.
        /// </summary>
        public static string Country_China {
            get {
                return ResourceManager.GetString("Country_China", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Czech.
        /// </summary>
        public static string Country_Czech {
            get {
                return ResourceManager.GetString("Country_Czech", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на France.
        /// </summary>
        public static string Country_France {
            get {
                return ResourceManager.GetString("Country_France", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Germany.
        /// </summary>
        public static string Country_Germany {
            get {
                return ResourceManager.GetString("Country_Germany", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Japan.
        /// </summary>
        public static string Country_Japan {
            get {
                return ResourceManager.GetString("Country_Japan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Poland.
        /// </summary>
        public static string Country_Poland {
            get {
                return ResourceManager.GetString("Country_Poland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sweden.
        /// </summary>
        public static string Country_Sweden {
            get {
                return ResourceManager.GetString("Country_Sweden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на UK.
        /// </summary>
        public static string Country_Uk {
            get {
                return ResourceManager.GetString("Country_Uk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на USA.
        /// </summary>
        public static string Country_Usa {
            get {
                return ResourceManager.GetString("Country_Usa", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на USSR.
        /// </summary>
        public static string Country_Ussr {
            get {
                return ResourceManager.GetString("Country_Ussr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Commander.
        /// </summary>
        public static string CrewMember_commander {
            get {
                return ResourceManager.GetString("CrewMember_commander", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Driver.
        /// </summary>
        public static string CrewMember_driver {
            get {
                return ResourceManager.GetString("CrewMember_driver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gunner.
        /// </summary>
        public static string CrewMember_gunner {
            get {
                return ResourceManager.GetString("CrewMember_gunner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Loader.
        /// </summary>
        public static string CrewMember_loader {
            get {
                return ResourceManager.GetString("CrewMember_loader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Radioman.
        /// </summary>
        public static string CrewMember_radioman {
            get {
                return ResourceManager.GetString("CrewMember_radioman", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damaged device.
        /// </summary>
        public static string CritType_DamagedDevice {
            get {
                return ResourceManager.GetString("CritType_DamagedDevice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroyed device.
        /// </summary>
        public static string CritType_DestroyedDevice {
            get {
                return ResourceManager.GetString("CritType_DestroyedDevice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroyed tankmen.
        /// </summary>
        public static string CritType_DestroyedTankmen {
            get {
                return ResourceManager.GetString("CritType_DestroyedTankmen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select date.
        /// </summary>
        public static string DatePicker_SelectDate {
            get {
                return ResourceManager.GetString("DatePicker_SelectDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survived.
        /// </summary>
        public static string DeathReason_Alive {
            get {
                return ResourceManager.GetString("DeathReason_Alive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crashed.
        /// </summary>
        public static string DeathReason_Crashed {
            get {
                return ResourceManager.GetString("DeathReason_Crashed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crew dead.
        /// </summary>
        public static string DeathReason_CrewDead {
            get {
                return ResourceManager.GetString("DeathReason_CrewDead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dead.
        /// </summary>
        public static string DeathReason_Dead {
            get {
                return ResourceManager.GetString("DeathReason_Dead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroyed by death zone.
        /// </summary>
        public static string DeathReason_DestroyedByDeathZone {
            get {
                return ResourceManager.GetString("DeathReason_DestroyedByDeathZone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroyed by fire.
        /// </summary>
        public static string DeathReason_DestroyedByFire {
            get {
                return ResourceManager.GetString("DeathReason_DestroyedByFire", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroyed by ramming.
        /// </summary>
        public static string DeathReason_DestroyedByRamming {
            get {
                return ResourceManager.GetString("DeathReason_DestroyedByRamming", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroyed by shot.
        /// </summary>
        public static string DeathReason_DestroyedByShot {
            get {
                return ResourceManager.GetString("DeathReason_DestroyedByShot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No Data.
        /// </summary>
        public static string DeathReason_Unknown {
            get {
                return ResourceManager.GetString("DeathReason_Unknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Vehicle drowned.
        /// </summary>
        public static string DeathReason_VehicleDrowned {
            get {
                return ResourceManager.GetString("DeathReason_VehicleDrowned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ammo bay.
        /// </summary>
        public static string Device_ammoBay {
            get {
                return ResourceManager.GetString("Device_ammoBay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Engine.
        /// </summary>
        public static string Device_engine {
            get {
                return ResourceManager.GetString("Device_engine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fuel tank.
        /// </summary>
        public static string Device_fuelTank {
            get {
                return ResourceManager.GetString("Device_fuelTank", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gun.
        /// </summary>
        public static string Device_gun {
            get {
                return ResourceManager.GetString("Device_gun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Radio.
        /// </summary>
        public static string Device_radio {
            get {
                return ResourceManager.GetString("Device_radio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Surveying device.
        /// </summary>
        public static string Device_surveyingDevice {
            get {
                return ResourceManager.GetString("Device_surveyingDevice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Track.
        /// </summary>
        public static string Device_track {
            get {
                return ResourceManager.GetString("Device_track", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Turret rotator.
        /// </summary>
        public static string Device_turretRotator {
            get {
                return ResourceManager.GetString("Device_turretRotator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Difference.
        /// </summary>
        public static string Difference {
            get {
                return ResourceManager.GetString("Difference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Black.
        /// </summary>
        public static string DossierTheme_Black {
            get {
                return ResourceManager.GetString("DossierTheme_Black", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Silver.
        /// </summary>
        public static string DossierTheme_Silver {
            get {
                return ResourceManager.GetString("DossierTheme_Silver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на m&apos; m &apos;s&apos; s&apos;.
        /// </summary>
        public static string ExtendedTimeFormat {
            get {
                return ResourceManager.GetString("ExtendedTimeFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No.
        /// </summary>
        public static string False {
            get {
                return ResourceManager.GetString("False", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Base capture, the base was captured.
        /// </summary>
        public static string FinishReason_BaseCapture {
            get {
                return ResourceManager.GetString("FinishReason_BaseCapture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Extermination, all vehicles were destroyed.
        /// </summary>
        public static string FinishReason_Extermination {
            get {
                return ResourceManager.GetString("FinishReason_Extermination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Failure, the arena did not initialize or had an internal failure.
        /// </summary>
        public static string FinishReason_Failure {
            get {
                return ResourceManager.GetString("FinishReason_Failure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Technical, the match was interrupted by a server restart or was otherwise cancelled by the server.
        /// </summary>
        public static string FinishReason_Technical {
            get {
                return ResourceManager.GetString("FinishReason_Technical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Timeout, the battle time has elapsed.
        /// </summary>
        public static string FinishReason_Timeout {
            get {
                return ResourceManager.GetString("FinishReason_Timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unknown.
        /// </summary>
        public static string FinishReason_Unknown {
            get {
                return ResourceManager.GetString("FinishReason_Unknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage ratio: 0.00.
        /// </summary>
        public static string Gauge_DamageRatioFormat {
            get {
                return ResourceManager.GetString("Gauge_DamageRatioFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Eff: 0.
        /// </summary>
        public static string Gauge_EffFormat {
            get {
                return ResourceManager.GetString("Gauge_EffFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Kill/death: 0.00.
        /// </summary>
        public static string Gauge_KillDeathFormat {
            get {
                return ResourceManager.GetString("Gauge_KillDeathFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Wins: 0.0.
        /// </summary>
        public static string Gauge_WinsFormat {
            get {
                return ResourceManager.GetString("Gauge_WinsFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на WN8: 0.
        /// </summary>
        public static string Gauge_Wn8Format {
            get {
                return ResourceManager.GetString("Gauge_Wn8Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на High-Explosive.
        /// </summary>
        public static string HIGH_EXPLOSIVE {
            get {
                return ResourceManager.GetString("HIGH_EXPLOSIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на High-Explosive.
        /// </summary>
        public static string HIGH_EXPLOSIVE_PREMIUM {
            get {
                return ResourceManager.GetString("HIGH_EXPLOSIVE_PREMIUM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на High-Explosive Anti-Tank.
        /// </summary>
        public static string HOLLOW_CHARGE {
            get {
                return ResourceManager.GetString("HOLLOW_CHARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Download.
        /// </summary>
        public static string Hyperlink_Download_Text {
            get {
                return ResourceManager.GetString("Hyperlink_Download_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Forum.
        /// </summary>
        public static string Hyperlink_Forum_Text {
            get {
                return ResourceManager.GetString("Hyperlink_Forum_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle Hero Achievements.
        /// </summary>
        public static string Label_Achievements_BattleHero {
            get {
                return ResourceManager.GetString("Label_Achievements_BattleHero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Commemorative Achievements.
        /// </summary>
        public static string Label_Achievements_CommemorativeAchievements {
            get {
                return ResourceManager.GetString("Label_Achievements_CommemorativeAchievements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Epic Achievements.
        /// </summary>
        public static string Label_Achievements_Epic {
            get {
                return ResourceManager.GetString("Label_Achievements_Epic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Group Achievements.
        /// </summary>
        public static string Label_Achievements_GroupAchievements {
            get {
                return ResourceManager.GetString("Label_Achievements_GroupAchievements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Historical Battle.
        /// </summary>
        public static string Label_Achievements_HistoricalBattle {
            get {
                return ResourceManager.GetString("Label_Achievements_HistoricalBattle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Honorary Ranks.
        /// </summary>
        public static string Label_Achievements_HonoraryRanks {
            get {
                return ResourceManager.GetString("Label_Achievements_HonoraryRanks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Special Achievements.
        /// </summary>
        public static string Label_Achievements_Special {
            get {
                return ResourceManager.GetString("Label_Achievements_Special", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Team battle.
        /// </summary>
        public static string Label_Achievements_TeamBattle {
            get {
                return ResourceManager.GetString("Label_Achievements_TeamBattle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Folder Name.
        /// </summary>
        public static string Label_AddReplayFolder_Name {
            get {
                return ResourceManager.GetString("Label_AddReplayFolder_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Color scheme.
        /// </summary>
        public static string Label_ColorScheme {
            get {
                return ResourceManager.GetString("Label_ColorScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage blocked by armor.
        /// </summary>
        public static string Label_DamageBlockedByArmor {
            get {
                return ResourceManager.GetString("Label_DamageBlockedByArmor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Experience.
        /// </summary>
        public static string Label_Experience {
            get {
                return ResourceManager.GetString("Label_Experience", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Potential damage received.
        /// </summary>
        public static string Label_PotentialDamageReceived {
            get {
                return ResourceManager.GetString("Label_PotentialDamageReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle efficiency.
        /// </summary>
        public static string Label_Replay_BattleEfficiency {
            get {
                return ResourceManager.GetString("Label_Replay_BattleEfficiency", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Credits.
        /// </summary>
        public static string Label_Replay_Credits {
            get {
                return ResourceManager.GetString("Label_Replay_Credits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enemy Team.
        /// </summary>
        public static string Label_Replay_EnemyTeam {
            get {
                return ResourceManager.GetString("Label_Replay_EnemyTeam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Assault.
        /// </summary>
        public static string Label_Replay_MapMode_Assault {
            get {
                return ResourceManager.GetString("Label_Replay_MapMode_Assault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Domination.
        /// </summary>
        public static string Label_Replay_MapMode_domination {
            get {
                return ResourceManager.GetString("Label_Replay_MapMode_domination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Standart.
        /// </summary>
        public static string Label_Replay_MapMode_Standart {
            get {
                return ResourceManager.GetString("Label_Replay_MapMode_Standart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на OurTeam.
        /// </summary>
        public static string Label_Replay_OurTeam {
            get {
                return ResourceManager.GetString("Label_Replay_OurTeam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Without Premium.
        /// </summary>
        public static string Label_Replay_WithoutPremium {
            get {
                return ResourceManager.GetString("Label_Replay_WithoutPremium", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на With Premium.
        /// </summary>
        public static string Label_Replay_WithPremium {
            get {
                return ResourceManager.GetString("Label_Replay_WithPremium", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Experience (x{0} for the first win in a day).
        /// </summary>
        public static string Label_Replay_XpFactorFormat {
            get {
                return ResourceManager.GetString("Label_Replay_XpFactorFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на action participation.
        /// </summary>
        public static string Label_ReplayDetail_ActionCredits {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_ActionCredits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage caused to allies (destroyed/HP).
        /// </summary>
        public static string Label_ReplayDetail_AlliesDamage {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_AlliesDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Auto-resupply consumables.
        /// </summary>
        public static string Label_ReplayDetail_AutoEquip {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_AutoEquip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Auto-resupply ammunition.
        /// </summary>
        public static string Label_ReplayDetail_AutoLoad {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_AutoLoad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Auto-repair vehicle.
        /// </summary>
        public static string Label_ReplayDetail_AutoRepair {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_AutoRepair", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle duration.
        /// </summary>
        public static string Label_ReplayDetail_BattleDuration {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_BattleDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Starting time.
        /// </summary>
        public static string Label_ReplayDetail_BattleStartTime {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_BattleStartTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Base capture/defence points.
        /// </summary>
        public static string Label_ReplayDetail_CaptureDefensePoints {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_CaptureDefensePoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Credits.
        /// </summary>
        public static string Label_ReplayDetail_Credits {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_Credits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Received.
        /// </summary>
        public static string Label_ReplayDetail_CreditsReceived {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_CreditsReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Total:.
        /// </summary>
        public static string Label_ReplayDetail_CreditsTotal {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_CreditsTotal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage.
        /// </summary>
        public static string Label_ReplayDetail_Damage {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_Damage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage to Enemy Vehicles Stunned by You.
        /// </summary>
        public static string Label_ReplayDetail_DamageAssistedStun {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_DamageAssistedStun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enemy vehicles damaged/destroyed.
        /// </summary>
        public static string Label_ReplayDetail_DamagedDestroyed {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_DamagedDestroyed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage due to the player’s assistance.
        /// </summary>
        public static string Label_ReplayDetail_DamageUponDetecting {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_DamageUponDetecting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enemy vehicles spotted.
        /// </summary>
        public static string Label_ReplayDetail_Detected {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_Detected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на direct hits/penetrations.
        /// </summary>
        public static string Label_ReplayDetail_DirectHits {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_DirectHits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Finish reason.
        /// </summary>
        public static string Label_ReplayDetail_FinishReason {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_FinishReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на for the first victory each day.
        /// </summary>
        public static string Label_ReplayDetail_ForTheFirstVictory {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_ForTheFirstVictory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на splash damange.
        /// </summary>
        public static string Label_ReplayDetail_HEDamage {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_HEDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Hits received as a result of splash damage.
        /// </summary>
        public static string Label_ReplayDetail_HEReceived {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_HEReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Hits received.
        /// </summary>
        public static string Label_ReplayDetail_HitsReceived {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_HitsReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Compensation for damage caused by allies.
        /// </summary>
        public static string Label_ReplayDetail_InContribution {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_InContribution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Is Alive.
        /// </summary>
        public static string Label_ReplayDetail_IsAlive {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_IsAlive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Time of destruction.
        /// </summary>
        public static string Label_ReplayDetail_LifeTime {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_LifeTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на non-penetration.
        /// </summary>
        public static string Label_ReplayDetail_NonPenetration {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_NonPenetration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fine for causing damage to allies.
        /// </summary>
        public static string Label_ReplayDetail_OutContribution {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_OutContribution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на penetrations.
        /// </summary>
        public static string Label_ReplayDetail_Penetrations {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_Penetrations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Shots fired.
        /// </summary>
        public static string Label_ReplayDetail_ShotsFired {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_ShotsFired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на from a distance of more than 300 meters.
        /// </summary>
        public static string Label_ReplayDetail_SniperDamage {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_SniperDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Statistics.
        /// </summary>
        public static string Label_ReplayDetail_Statistic {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_Statistic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Stuns caused.
        /// </summary>
        public static string Label_ReplayDetail_StunNum {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_StunNum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Time.
        /// </summary>
        public static string Label_ReplayDetail_Time {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_Time", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Distance traveled.
        /// </summary>
        public static string Label_ReplayDetail_Traveled {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_Traveled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на With Premium.
        /// </summary>
        public static string Label_ReplayDetail_WithPremium {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_WithPremium", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Experience.
        /// </summary>
        public static string Label_ReplayDetail_XP {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_XP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Total:.
        /// </summary>
        public static string Label_ReplayDetail_XpTotal {
            get {
                return ResourceManager.GetString("Label_ReplayDetail_XpTotal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на English.
        /// </summary>
        public static string Language_English {
            get {
                return ResourceManager.GetString("Language_English", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Русский.
        /// </summary>
        public static string Language_Russian {
            get {
                return ResourceManager.GetString("Language_Russian", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Training area.
        /// </summary>
        public static string Map_00_tank_tutorial {
            get {
                return ResourceManager.GetString("Map_00_tank_tutorial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Karelia.
        /// </summary>
        public static string Map_01_karelia {
            get {
                return ResourceManager.GetString("Map_01_karelia", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Malinovka.
        /// </summary>
        public static string Map_02_malinovka {
            get {
                return ResourceManager.GetString("Map_02_malinovka", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Province.
        /// </summary>
        public static string Map_03_campania {
            get {
                return ResourceManager.GetString("Map_03_campania", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Himmelsdorf.
        /// </summary>
        public static string Map_04_himmelsdorf {
            get {
                return ResourceManager.GetString("Map_04_himmelsdorf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Prokhorovka.
        /// </summary>
        public static string Map_05_prohorovka {
            get {
                return ResourceManager.GetString("Map_05_prohorovka", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ensk.
        /// </summary>
        public static string Map_06_ensk {
            get {
                return ResourceManager.GetString("Map_06_ensk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Lakeville.
        /// </summary>
        public static string Map_07_lakeville {
            get {
                return ResourceManager.GetString("Map_07_lakeville", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ruinberg.
        /// </summary>
        public static string Map_08_ruinberg {
            get {
                return ResourceManager.GetString("Map_08_ruinberg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Mines.
        /// </summary>
        public static string Map_10_hills {
            get {
                return ResourceManager.GetString("Map_10_hills", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Mittengard.
        /// </summary>
        public static string Map_100_thepit {
            get {
                return ResourceManager.GetString("Map_100_thepit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Overlord.
        /// </summary>
        public static string Map_101_dday {
            get {
                return ResourceManager.GetString("Map_101_dday", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tank Rally.
        /// </summary>
        public static string Map_102_deathtrack {
            get {
                return ResourceManager.GetString("Map_102_deathtrack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Winter Ruinberg.
        /// </summary>
        public static string Map_103_ruinberg_winter {
            get {
                return ResourceManager.GetString("Map_103_ruinberg_winter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Berlin.
        /// </summary>
        public static string Map_105_germany {
            get {
                return ResourceManager.GetString("Map_105_germany", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Winter Showdown.
        /// </summary>
        public static string Map_109_battlecity_ny {
            get {
                return ResourceManager.GetString("Map_109_battlecity_ny", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Murovanka.
        /// </summary>
        public static string Map_11_murovanka {
            get {
                return ResourceManager.GetString("Map_11_murovanka", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Paris.
        /// </summary>
        public static string Map_111_paris {
            get {
                return ResourceManager.GetString("Map_111_paris", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pilsen.
        /// </summary>
        public static string Map_114_czech {
            get {
                return ResourceManager.GetString("Map_114_czech", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Erlenberg.
        /// </summary>
        public static string Map_13_erlenberg {
            get {
                return ResourceManager.GetString("Map_13_erlenberg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Siegfried Line.
        /// </summary>
        public static string Map_14_siegfried_line {
            get {
                return ResourceManager.GetString("Map_14_siegfried_line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Komarin.
        /// </summary>
        public static string Map_15_komarin {
            get {
                return ResourceManager.GetString("Map_15_komarin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Widepark.
        /// </summary>
        public static string Map_17_munchen {
            get {
                return ResourceManager.GetString("Map_17_munchen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cliff.
        /// </summary>
        public static string Map_18_cliff {
            get {
                return ResourceManager.GetString("Map_18_cliff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Abbey.
        /// </summary>
        public static string Map_19_monastery {
            get {
                return ResourceManager.GetString("Map_19_monastery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Swamp.
        /// </summary>
        public static string Map_22_slough {
            get {
                return ResourceManager.GetString("Map_22_slough", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Westfield.
        /// </summary>
        public static string Map_23_westfeld {
            get {
                return ResourceManager.GetString("Map_23_westfeld", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sand River.
        /// </summary>
        public static string Map_28_desert {
            get {
                return ResourceManager.GetString("Map_28_desert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на El Halluf.
        /// </summary>
        public static string Map_29_el_hallouf {
            get {
                return ResourceManager.GetString("Map_29_el_hallouf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Airfield.
        /// </summary>
        public static string Map_31_airfield {
            get {
                return ResourceManager.GetString("Map_31_airfield", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fjords.
        /// </summary>
        public static string Map_33_fjord {
            get {
                return ResourceManager.GetString("Map_33_fjord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Redshire.
        /// </summary>
        public static string Map_34_redshire {
            get {
                return ResourceManager.GetString("Map_34_redshire", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Steppes.
        /// </summary>
        public static string Map_35_steppes {
            get {
                return ResourceManager.GetString("Map_35_steppes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fisherman&apos;s Bay.
        /// </summary>
        public static string Map_36_fishing_bay {
            get {
                return ResourceManager.GetString("Map_36_fishing_bay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Mountain Pass.
        /// </summary>
        public static string Map_37_caucasus {
            get {
                return ResourceManager.GetString("Map_37_caucasus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Arctic Region.
        /// </summary>
        public static string Map_38_mannerheim_line {
            get {
                return ResourceManager.GetString("Map_38_mannerheim_line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на South Coast.
        /// </summary>
        public static string Map_39_crimea {
            get {
                return ResourceManager.GetString("Map_39_crimea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Port.
        /// </summary>
        public static string Map_42_north_america {
            get {
                return ResourceManager.GetString("Map_42_north_america", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Northwest.
        /// </summary>
        public static string Map_43_north_america {
            get {
                return ResourceManager.GetString("Map_43_north_america", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Live Oaks.
        /// </summary>
        public static string Map_44_north_america {
            get {
                return ResourceManager.GetString("Map_44_north_america", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Highway.
        /// </summary>
        public static string Map_45_north_america {
            get {
                return ResourceManager.GetString("Map_45_north_america", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Serene Coast.
        /// </summary>
        public static string Map_47_canada_a {
            get {
                return ResourceManager.GetString("Map_47_canada_a", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dragon Ridge.
        /// </summary>
        public static string Map_51_asia {
            get {
                return ResourceManager.GetString("Map_51_asia", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Hidden Village.
        /// </summary>
        public static string Map_53_japan {
            get {
                return ResourceManager.GetString("Map_53_japan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pearl River.
        /// </summary>
        public static string Map_60_asia_miao {
            get {
                return ResourceManager.GetString("Map_60_asia_miao", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tundra.
        /// </summary>
        public static string Map_63_tundra {
            get {
                return ResourceManager.GetString("Map_63_tundra", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sacred Valley.
        /// </summary>
        public static string Map_73_asia_korea {
            get {
                return ResourceManager.GetString("Map_73_asia_korea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Kharkov.
        /// </summary>
        public static string Map_83_kharkiv {
            get {
                return ResourceManager.GetString("Map_83_kharkiv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Windstorm.
        /// </summary>
        public static string Map_84_winter {
            get {
                return ResourceManager.GetString("Map_84_winter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Severogorsk.
        /// </summary>
        public static string Map_85_winter {
            get {
                return ResourceManager.GetString("Map_85_winter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Winter Himmelsdorf.
        /// </summary>
        public static string Map_86_himmelsdorf_winter {
            get {
                return ResourceManager.GetString("Map_86_himmelsdorf_winter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ruinberg on Fire.
        /// </summary>
        public static string Map_87_ruinberg_on_fire {
            get {
                return ResourceManager.GetString("Map_87_ruinberg_on_fire", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Stalingrad.
        /// </summary>
        public static string Map_92_stalingrad {
            get {
                return ResourceManager.GetString("Map_92_stalingrad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle City.
        /// </summary>
        public static string Map_94_battlecity {
            get {
                return ResourceManager.GetString("Map_94_battlecity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ghost Town.
        /// </summary>
        public static string Map_95_lost_city {
            get {
                return ResourceManager.GetString("Map_95_lost_city", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fire Arc.
        /// </summary>
        public static string Map_96_prohorovka_defense {
            get {
                return ResourceManager.GetString("Map_96_prohorovka_defense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Himmelsdorf Championship.
        /// </summary>
        public static string Map_99_himmelball {
            get {
                return ResourceManager.GetString("Map_99_himmelball", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Abrams&apos; Medal.
        /// </summary>
        public static string Medal_15x15_Abrams {
            get {
                return ResourceManager.GetString("Medal_15x15_Abrams", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Arsonist.
        /// </summary>
        public static string Medal_15x15_Arsonist {
            get {
                return ResourceManager.GetString("Medal_15x15_Arsonist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle Hero.
        /// </summary>
        public static string Medal_15x15_BattleHero {
            get {
                return ResourceManager.GetString("Medal_15x15_BattleHero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Billotte&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Billotte {
            get {
                return ResourceManager.GetString("Medal_15x15_Billotte", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Bölter&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Boelter {
            get {
                return ResourceManager.GetString("Medal_15x15_Boelter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Bombardier.
        /// </summary>
        public static string Medal_15x15_Bombardier {
            get {
                return ResourceManager.GetString("Medal_15x15_Bombardier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Bonecrusher.
        /// </summary>
        public static string Medal_15x15_Bonecrusher {
            get {
                return ResourceManager.GetString("Medal_15x15_Bonecrusher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Brothers in Arms.
        /// </summary>
        public static string Medal_15x15_BrothersInArms {
            get {
                return ResourceManager.GetString("Medal_15x15_BrothersInArms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Bruno&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Bruno {
            get {
                return ResourceManager.GetString("Medal_15x15_Bruno", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Burda&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Burda {
            get {
                return ResourceManager.GetString("Medal_15x15_Burda", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Carius&apos; Medal.
        /// </summary>
        public static string Medal_15x15_Carius {
            get {
                return ResourceManager.GetString("Medal_15x15_Carius", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Charmed.
        /// </summary>
        public static string Medal_15x15_Charmed {
            get {
                return ResourceManager.GetString("Medal_15x15_Charmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Confederate.
        /// </summary>
        public static string Medal_15x15_Confederate {
            get {
                return ResourceManager.GetString("Medal_15x15_Confederate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crucial Contribution.
        /// </summary>
        public static string Medal_15x15_CrucialContribution {
            get {
                return ResourceManager.GetString("Medal_15x15_CrucialContribution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Racer 2014.
        /// </summary>
        public static string Medal_15x15_DeathTrack {
            get {
                return ResourceManager.GetString("Medal_15x15_DeathTrack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Defender.
        /// </summary>
        public static string Medal_15x15_Defender {
            get {
                return ResourceManager.GetString("Medal_15x15_Defender", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на De Langlade&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_DeLanglade {
            get {
                return ResourceManager.GetString("Medal_15x15_DeLanglade", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Demolition.
        /// </summary>
        public static string Medal_15x15_Demolition {
            get {
                return ResourceManager.GetString("Medal_15x15_Demolition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Duelist.
        /// </summary>
        public static string Medal_15x15_Duelist {
            get {
                return ResourceManager.GetString("Medal_15x15_Duelist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dumitru&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Dumitru {
            get {
                return ResourceManager.GetString("Medal_15x15_Dumitru", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ekins&apos; Medal.
        /// </summary>
        public static string Medal_15x15_Ekins {
            get {
                return ResourceManager.GetString("Medal_15x15_Ekins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Even.
        /// </summary>
        public static string Medal_15x15_Even {
            get {
                return ResourceManager.GetString("Medal_15x15_Even", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fadin&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Fadin {
            get {
                return ResourceManager.GetString("Medal_15x15_Fadin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fighter.
        /// </summary>
        public static string Medal_15x15_Fighter {
            get {
                return ResourceManager.GetString("Medal_15x15_Fighter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Halonen&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Halonen {
            get {
                return ResourceManager.GetString("Medal_15x15_Halonen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Raseiniai Heroes&apos; Medal.
        /// </summary>
        public static string Medal_15x15_HeroesOfRassenay {
            get {
                return ResourceManager.GetString("Medal_15x15_HeroesOfRassenay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Hunter.
        /// </summary>
        public static string Medal_15x15_Hunter {
            get {
                return ResourceManager.GetString("Medal_15x15_Hunter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Medal Naidin.
        /// </summary>
        public static string Medal_15x15_Huntsman {
            get {
                return ResourceManager.GetString("Medal_15x15_Huntsman", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Impenetrable.
        /// </summary>
        public static string Medal_15x15_Impenetrable {
            get {
                return ResourceManager.GetString("Medal_15x15_Impenetrable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invader.
        /// </summary>
        public static string Medal_15x15_Invader {
            get {
                return ResourceManager.GetString("Medal_15x15_Invader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invincible.
        /// </summary>
        public static string Medal_15x15_Invincible {
            get {
                return ResourceManager.GetString("Medal_15x15_Invincible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Iron Man.
        /// </summary>
        public static string Medal_15x15_IronMan {
            get {
                return ResourceManager.GetString("Medal_15x15_IronMan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Kamikaze.
        /// </summary>
        public static string Medal_15x15_Kamikaze {
            get {
                return ResourceManager.GetString("Medal_15x15_Kamikaze", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Kay&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Kay {
            get {
                return ResourceManager.GetString("Medal_15x15_Kay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Knispel&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Knispel {
            get {
                return ResourceManager.GetString("Medal_15x15_Knispel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Kolobanov&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Kolobanov {
            get {
                return ResourceManager.GetString("Medal_15x15_Kolobanov", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pool&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_LafayettePool {
            get {
                return ResourceManager.GetString("Medal_15x15_LafayettePool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Lavrinenko&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Lavrinenko {
            get {
                return ResourceManager.GetString("Medal_15x15_Lavrinenko", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Leclerc&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Leclerk {
            get {
                return ResourceManager.GetString("Medal_15x15_Leclerk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Lehväslaiho&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Lehvaslaiho {
            get {
                return ResourceManager.GetString("Medal_15x15_Lehvaslaiho", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Lucky.
        /// </summary>
        public static string Medal_15x15_LuckyDevil {
            get {
                return ResourceManager.GetString("Medal_15x15_LuckyDevil", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на High Caliber.
        /// </summary>
        public static string Medal_15x15_MainGun {
            get {
                return ResourceManager.GetString("Medal_15x15_MainGun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Master Gunner.
        /// </summary>
        public static string Medal_15x15_MasterGunner {
            get {
                return ResourceManager.GetString("Medal_15x15_MasterGunner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Max Aimer Series.
        /// </summary>
        public static string Medal_15x15_MaxAimerSeries {
            get {
                return ResourceManager.GetString("Medal_15x15_MaxAimerSeries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на For Counter-Battery Fire.
        /// </summary>
        public static string Medal_15x15_MedalAntiSpgFire {
            get {
                return ResourceManager.GetString("Medal_15x15_MedalAntiSpgFire", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cold-Blooded.
        /// </summary>
        public static string Medal_15x15_MedalCoolBlood {
            get {
                return ResourceManager.GetString("Medal_15x15_MedalCoolBlood", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gore’s Medal.
        /// </summary>
        public static string Medal_15x15_MedalGore {
            get {
                return ResourceManager.GetString("Medal_15x15_MedalGore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rock Solid.
        /// </summary>
        public static string Medal_15x15_MedalMonolith {
            get {
                return ResourceManager.GetString("Medal_15x15_MedalMonolith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Stark’s Medal.
        /// </summary>
        public static string Medal_15x15_MedalStark {
            get {
                return ResourceManager.GetString("Medal_15x15_MedalStark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Mouse Trap.
        /// </summary>
        public static string Medal_15x15_MouseTrap {
            get {
                return ResourceManager.GetString("Medal_15x15_MouseTrap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Nicols&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Nikolas {
            get {
                return ResourceManager.GetString("Medal_15x15_Nikolas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Orlik&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Orlik {
            get {
                return ResourceManager.GetString("Medal_15x15_Orlik", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Oskin&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Oskin {
            get {
                return ResourceManager.GetString("Medal_15x15_Oskin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pascucci&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Pascucci {
            get {
                return ResourceManager.GetString("Medal_15x15_Pascucci", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Patrol Duty.
        /// </summary>
        public static string Medal_15x15_PatrolDuty {
            get {
                return ResourceManager.GetString("Medal_15x15_PatrolDuty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Valley of Pattons.
        /// </summary>
        public static string Medal_15x15_PattonValley {
            get {
                return ResourceManager.GetString("Medal_15x15_PattonValley", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Popel&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Poppel {
            get {
                return ResourceManager.GetString("Medal_15x15_Poppel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Radley-Walters&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_RadleyWalters {
            get {
                return ResourceManager.GetString("Medal_15x15_RadleyWalters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Raider.
        /// </summary>
        public static string Medal_15x15_Raider {
            get {
                return ResourceManager.GetString("Medal_15x15_Raider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reaper.
        /// </summary>
        public static string Medal_15x15_Reaper {
            get {
                return ResourceManager.GetString("Medal_15x15_Reaper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Scout.
        /// </summary>
        public static string Medal_15x15_Scout {
            get {
                return ResourceManager.GetString("Medal_15x15_Scout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sharpshooter.
        /// </summary>
        public static string Medal_15x15_Sharpshooter {
            get {
                return ResourceManager.GetString("Medal_15x15_Sharpshooter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Shoot To Kill.
        /// </summary>
        public static string Medal_15x15_ShootToKill {
            get {
                return ResourceManager.GetString("Medal_15x15_ShootToKill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The Lion of Sinai.
        /// </summary>
        public static string Medal_15x15_Sinai {
            get {
                return ResourceManager.GetString("Medal_15x15_Sinai", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sniper.
        /// </summary>
        public static string Medal_15x15_Sniper {
            get {
                return ResourceManager.GetString("Medal_15x15_Sniper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tanker-Sniper.
        /// </summary>
        public static string Medal_15x15_Sniper2 {
            get {
                return ResourceManager.GetString("Medal_15x15_Sniper2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Steel Wall.
        /// </summary>
        public static string Medal_15x15_SteelWall {
            get {
                return ResourceManager.GetString("Medal_15x15_SteelWall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sturdy.
        /// </summary>
        public static string Medal_15x15_Sturdy {
            get {
                return ResourceManager.GetString("Medal_15x15_Sturdy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survivor.
        /// </summary>
        public static string Medal_15x15_Survivor {
            get {
                return ResourceManager.GetString("Medal_15x15_Survivor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tamada Yoshio&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_TamadaYoshio {
            get {
                return ResourceManager.GetString("Medal_15x15_TamadaYoshio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tarczay&apos;s Medal.
        /// </summary>
        public static string Medal_15x15_Tarczay {
            get {
                return ResourceManager.GetString("Medal_15x15_Tarczay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Top Gun.
        /// </summary>
        public static string Medal_15x15_Warrior {
            get {
                return ResourceManager.GetString("Medal_15x15_Warrior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Armored Fist.
        /// </summary>
        public static string Medal_7x7_ArmoredFist {
            get {
                return ResourceManager.GetString("Medal_7x7_ArmoredFist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle Tested.
        /// </summary>
        public static string Medal_7x7_BattleTested {
            get {
                return ResourceManager.GetString("Medal_7x7_BattleTested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Brute Force Medal.
        /// </summary>
        public static string Medal_7x7_BruteForceMedal {
            get {
                return ResourceManager.GetString("Medal_7x7_BruteForceMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crucial Shot.
        /// </summary>
        public static string Medal_7x7_CrucialShotMedal {
            get {
                return ResourceManager.GetString("Medal_7x7_CrucialShotMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fighting Reconnaissance.
        /// </summary>
        public static string Medal_7x7_FightingReconnaissanceMedal {
            get {
                return ResourceManager.GetString("Medal_7x7_FightingReconnaissanceMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fire and Steel.
        /// </summary>
        public static string Medal_7x7_FireAndSteelMedal {
            get {
                return ResourceManager.GetString("Medal_7x7_FireAndSteelMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на For Tactical Operations.
        /// </summary>
        public static string Medal_7x7_ForTacticalOperations {
            get {
                return ResourceManager.GetString("Medal_7x7_ForTacticalOperations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Genius for War.
        /// </summary>
        public static string Medal_7x7_GeniusForWarMedal {
            get {
                return ResourceManager.GetString("Medal_7x7_GeniusForWarMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на God of War.
        /// </summary>
        public static string Medal_7x7_GodOfWar {
            get {
                return ResourceManager.GetString("Medal_7x7_GodOfWar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Guerrilla Medal.
        /// </summary>
        public static string Medal_7x7_GuerrillaMedal {
            get {
                return ResourceManager.GetString("Medal_7x7_GuerrillaMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Heavy Fire.
        /// </summary>
        public static string Medal_7x7_HeavyFireMedal {
            get {
                return ResourceManager.GetString("Medal_7x7_HeavyFireMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Infiltrator Medal.
        /// </summary>
        public static string Medal_7x7_InfiltratorMedal {
            get {
                return ResourceManager.GetString("Medal_7x7_InfiltratorMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на King Of The Hill.
        /// </summary>
        public static string Medal_7x7_KingOfTheHill {
            get {
                return ResourceManager.GetString("Medal_7x7_KingOfTheHill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No Man&apos;s Land.
        /// </summary>
        public static string Medal_7x7_NoMansLand {
            get {
                return ResourceManager.GetString("Medal_7x7_NoMansLand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Premature Detonation Medal.
        /// </summary>
        public static string Medal_7x7_PrematureDetonationMedal {
            get {
                return ResourceManager.GetString("Medal_7x7_PrematureDetonationMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Promising Fighter.
        /// </summary>
        public static string Medal_7x7_PromisingFighterMedal {
            get {
                return ResourceManager.GetString("Medal_7x7_PromisingFighterMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pyromaniac.
        /// </summary>
        public static string Medal_7x7_PyromaniacMedal {
            get {
                return ResourceManager.GetString("Medal_7x7_PyromaniacMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ranger.
        /// </summary>
        public static string Medal_7x7_RangerMedal {
            get {
                return ResourceManager.GetString("Medal_7x7_RangerMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sentinel Medal.
        /// </summary>
        public static string Medal_7x7_SentinelMedal {
            get {
                return ResourceManager.GetString("Medal_7x7_SentinelMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tactical Breakthrough.
        /// </summary>
        public static string Medal_7x7_TacticalBreakthrough {
            get {
                return ResourceManager.GetString("Medal_7x7_TacticalBreakthrough", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Will To Win Spirit.
        /// </summary>
        public static string Medal_7x7_WillToWinSpirit {
            get {
                return ResourceManager.GetString("Medal_7x7_WillToWinSpirit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Wolf Among Sheep.
        /// </summary>
        public static string Medal_7x7_WolfAmongSheepMedal {
            get {
                return ResourceManager.GetString("Medal_7x7_WolfAmongSheepMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rotmistrov.
        /// </summary>
        public static string Medal_Clan_Rotmistrov {
            get {
                return ResourceManager.GetString("Medal_Clan_Rotmistrov", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Conqueror.
        /// </summary>
        public static string Medal_Fort_Conqueror {
            get {
                return ResourceManager.GetString("Medal_Fort_Conqueror", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Counterblow.
        /// </summary>
        public static string Medal_Fort_Counterblow {
            get {
                return ResourceManager.GetString("Medal_Fort_Counterblow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crusher.
        /// </summary>
        public static string Medal_Fort_Crusher {
            get {
                return ResourceManager.GetString("Medal_Fort_Crusher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fire And Sword.
        /// </summary>
        public static string Medal_Fort_FireAndSword {
            get {
                return ResourceManager.GetString("Medal_Fort_FireAndSword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Kampfer.
        /// </summary>
        public static string Medal_Fort_Kampfer {
            get {
                return ResourceManager.GetString("Medal_Fort_Kampfer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Soldier Of Fortune.
        /// </summary>
        public static string Medal_Fort_SoldierOfFortune {
            get {
                return ResourceManager.GetString("Medal_Fort_SoldierOfFortune", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Guards Man.
        /// </summary>
        public static string Medal_HistoricalBattle_GuardsMan {
            get {
                return ResourceManager.GetString("Medal_HistoricalBattle_GuardsMan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Maker Of History.
        /// </summary>
        public static string Medal_HistoricalBattle_MakerOfHistory {
            get {
                return ResourceManager.GetString("Medal_HistoricalBattle_MakerOfHistory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Compare.
        /// </summary>
        public static string MenuItem_Compare {
            get {
                return ResourceManager.GetString("MenuItem_Compare", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Export.
        /// </summary>
        public static string MenuItem_Export {
            get {
                return ResourceManager.GetString("MenuItem_Export", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на CSV.
        /// </summary>
        public static string MenuItem_Export_Csv {
            get {
                return ResourceManager.GetString("MenuItem_Export_Csv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Frags to CSV.
        /// </summary>
        public static string MenuItem_Export_Frags_Csv {
            get {
                return ResourceManager.GetString("MenuItem_Export_Frags_Csv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Favorite players.
        /// </summary>
        public static string MenuItem_FavoritePlayers {
            get {
                return ResourceManager.GetString("MenuItem_FavoritePlayers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на About.
        /// </summary>
        public static string MenuItem_Header_About {
            get {
                return ResourceManager.GetString("MenuItem_Header_About", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на _Load.
        /// </summary>
        public static string MenuItem_Header_Load {
            get {
                return ResourceManager.GetString("MenuItem_Header_Load", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на _Settings.
        /// </summary>
        public static string MenuItem_Header_Settings {
            get {
                return ResourceManager.GetString("MenuItem_Header_Settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Search.
        /// </summary>
        public static string MenuItem_Search {
            get {
                return ResourceManager.GetString("MenuItem_Search", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Clans.
        /// </summary>
        public static string MenuItem_SearchClans {
            get {
                return ResourceManager.GetString("MenuItem_SearchClans", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Players.
        /// </summary>
        public static string MenuItem_SearchPlayers {
            get {
                return ResourceManager.GetString("MenuItem_SearchPlayers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Can&apos;t find player data - {0}.
        /// </summary>
        public static string Msg_CantFindPlayerData {
            get {
                return ResourceManager.GetString("Msg_CantFindPlayerData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Can&apos;t find replays directory - &apos;{0}&apos;..
        /// </summary>
        public static string Msg_CantFindReplaysDirectory {
            get {
                return ResourceManager.GetString("Msg_CantFindReplaysDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Can&apos;t get clan data from server.
        /// </summary>
        public static string Msg_CantGetClanDataFromServer {
            get {
                return ResourceManager.GetString("Msg_CantGetClanDataFromServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error on replay file read.
        /// </summary>
        public static string Msg_Error_on_replay_file_read {
            get {
                return ResourceManager.GetString("Msg_Error_on_replay_file_read", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error on data load.
        /// </summary>
        public static string Msg_ErrorOnDataLoad {
            get {
                return ResourceManager.GetString("Msg_ErrorOnDataLoad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error on file deletion, please check your access rights({0}).
        /// </summary>
        public static string Msg_ErrorOnFileDeletion {
            get {
                return ResourceManager.GetString("Msg_ErrorOnFileDeletion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error on file deletion, please check your access rights.
        /// </summary>
        public static string Msg_ErrorOnFilesDeletion {
            get {
                return ResourceManager.GetString("Msg_ErrorOnFilesDeletion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Player info not found in local app database - [{0}].
        /// </summary>
        public static string Msg_ErrorOnGetLocalPlayerInfo {
            get {
                return ResourceManager.GetString("Msg_ErrorOnGetLocalPlayerInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error on play replay.
        /// </summary>
        public static string Msg_ErrorOnPlayReplay {
            get {
                return ResourceManager.GetString("Msg_ErrorOnPlayReplay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Exception occurred during running application..
        /// </summary>
        public static string Msg_ExceptionOccurred {
            get {
                return ResourceManager.GetString("Msg_ExceptionOccurred", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Can&apos;t load replay file. File incomplete or not supported.
        /// </summary>
        public static string Msg_File_incomplete_or_not_supported {
            get {
                return ResourceManager.GetString("Msg_File_incomplete_or_not_supported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error on getting player data from server - [{0}].
        /// </summary>
        public static string Msg_GetPlayerData {
            get {
                return ResourceManager.GetString("Msg_GetPlayerData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на New version available - {0}. Do you want download and install it now?.
        /// </summary>
        public static string Msg_NewVersion {
            get {
                return ResourceManager.GetString("Msg_NewVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete files and save battle results to local base? Press Yes to save results? Press No to complete deletion..
        /// </summary>
        public static string Msg_ReplaysDelete {
            get {
                return ResourceManager.GetString("Msg_ReplaysDelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Currently you not logined to the target site. You need to be already authentificated in IE. Do you want to open the site in browser?.
        /// </summary>
        public static string Msg_ReplayUpload_AuthentificationFailure {
            get {
                return ResourceManager.GetString("Msg_ReplayUpload_AuthentificationFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Server not selected.
        /// </summary>
        public static string Msg_ServerNotSelected {
            get {
                return ResourceManager.GetString("Msg_ServerNotSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sql exception occurred during running application..
        /// </summary>
        public static string Msg_SqlExceptionOccurred {
            get {
                return ResourceManager.GetString("Msg_SqlExceptionOccurred", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на from.
        /// </summary>
        public static string Operation_Gt {
            get {
                return ResourceManager.GetString("Operation_Gt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на to.
        /// </summary>
        public static string Operation_Lt {
            get {
                return ResourceManager.GetString("Operation_Lt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Compare with.
        /// </summary>
        public static string PeriodTab_CompareHeader {
            get {
                return ResourceManager.GetString("PeriodTab_CompareHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Platoon.
        /// </summary>
        public static string Platoon_Platoon {
            get {
                return ResourceManager.GetString("Platoon_Platoon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Solo.
        /// </summary>
        public static string Platoon_Solo {
            get {
                return ResourceManager.GetString("Platoon_Solo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Charts initialization.
        /// </summary>
        public static string Progress_ChartsInitialization {
            get {
                return ResourceManager.GetString("Progress_ChartsInitialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Charts initialization completed.
        /// </summary>
        public static string Progress_ChartsInitializationCompleted {
            get {
                return ResourceManager.GetString("Progress_ChartsInitializationCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Common player statistic loading.
        /// </summary>
        public static string Progress_CommonStatLoading {
            get {
                return ResourceManager.GetString("Progress_CommonStatLoading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Common player statistic loading completed.
        /// </summary>
        public static string Progress_CommonStatLoadingCompleted {
            get {
                return ResourceManager.GetString("Progress_CommonStatLoadingCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Data load completed.
        /// </summary>
        public static string Progress_DataLoadCompleted {
            get {
                return ResourceManager.GetString("Progress_DataLoadCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Last used vehicles list loading.
        /// </summary>
        public static string Progress_LoadLastUsedVehiclesList {
            get {
                return ResourceManager.GetString("Progress_LoadLastUsedVehiclesList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Last used vehicles list loading completed.
        /// </summary>
        public static string Progress_LoadLastUsedVehiclesListCompleted {
            get {
                return ResourceManager.GetString("Progress_LoadLastUsedVehiclesListCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Vehicles statistic loading.
        /// </summary>
        public static string Progress_VehiclesStatLoading {
            get {
                return ResourceManager.GetString("Progress_VehiclesStatLoading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Vehicles statistic loading completed.
        /// </summary>
        public static string Progress_VehiclesStatLoadingCompleted {
            get {
                return ResourceManager.GetString("Progress_VehiclesStatLoadingCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Processing file {0}/{1} - {2}....
        /// </summary>
        public static string ProgressLabel_Processing_file_format {
            get {
                return ResourceManager.GetString("ProgressLabel_Processing_file_format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Loading replays.
        /// </summary>
        public static string ProgressTitle_Loading_replays {
            get {
                return ResourceManager.GetString("ProgressTitle_Loading_replays", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle Simulator.
        /// </summary>
        public static string Replay_Tab_Header_BattleSimulator {
            get {
                return ResourceManager.GetString("Replay_Tab_Header_BattleSimulator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Detailed Report.
        /// </summary>
        public static string Replay_Tab_Header_DetailedReport {
            get {
                return ResourceManager.GetString("Replay_Tab_Header_DetailedReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Equipment.
        /// </summary>
        public static string Replay_Tab_Header_Equipment {
            get {
                return ResourceManager.GetString("Replay_Tab_Header_Equipment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Extended Info.
        /// </summary>
        public static string Replay_Tab_Header_ExtendedInfo {
            get {
                return ResourceManager.GetString("Replay_Tab_Header_ExtendedInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Personal Score.
        /// </summary>
        public static string Replay_Tab_Header_PersonalScore {
            get {
                return ResourceManager.GetString("Replay_Tab_Header_PersonalScore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Team Score.
        /// </summary>
        public static string Replay_Tab_Header_TeamScore {
            get {
                return ResourceManager.GetString("Replay_Tab_Header_TeamScore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Close.
        /// </summary>
        public static string Replay_TeamMember_HideResultButton {
            get {
                return ResourceManager.GetString("Replay_TeamMember_HideResultButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на By column.
        /// </summary>
        public static string ReplaysFilter_ByColumns {
            get {
                return ResourceManager.GetString("ReplaysFilter_ByColumns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Player.
        /// </summary>
        public static string ReplaysFilter_Player {
            get {
                return ResourceManager.GetString("ReplaysFilter_Player", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Result.
        /// </summary>
        public static string ReplaysFilter_Result {
            get {
                return ResourceManager.GetString("ReplaysFilter_Result", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Group by.
        /// </summary>
        public static string ReplaysFilterGroupBy {
            get {
                return ResourceManager.GetString("ReplaysFilterGroupBy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Maps.
        /// </summary>
        public static string ReplaysFilterGroupHeader_Maps {
            get {
                return ResourceManager.GetString("ReplaysFilterGroupHeader_Maps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Other.
        /// </summary>
        public static string ReplaysFilterGroupHeader_Other {
            get {
                return ResourceManager.GetString("ReplaysFilterGroupHeader_Other", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tanks.
        /// </summary>
        public static string ReplaysFilterGroupHeader_Tanks {
            get {
                return ResourceManager.GetString("ReplaysFilterGroupHeader_Tanks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Deleted.
        /// </summary>
        public static string ReplaysFolders_Deleted {
            get {
                return ResourceManager.GetString("ReplaysFolders_Deleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy file name.
        /// </summary>
        public static string ReplaysTab_CopyFileNameToClipboard {
            get {
                return ResourceManager.GetString("ReplaysTab_CopyFileNameToClipboard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy name.
        /// </summary>
        public static string ReplaysTab_CopyPlayerName {
            get {
                return ResourceManager.GetString("ReplaysTab_CopyPlayerName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy link to clipboard.
        /// </summary>
        public static string ReplaysTab_CopyToClipboard {
            get {
                return ResourceManager.GetString("ReplaysTab_CopyToClipboard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete.
        /// </summary>
        public static string ReplaysTab_DeleteBtn {
            get {
                return ResourceManager.GetString("ReplaysTab_DeleteBtn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pack.
        /// </summary>
        public static string ReplaysTab_PackBtn {
            get {
                return ResourceManager.GetString("ReplaysTab_PackBtn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Play.
        /// </summary>
        public static string ReplaysTab_Play {
            get {
                return ResourceManager.GetString("ReplaysTab_Play", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Play with....
        /// </summary>
        public static string ReplaysTab_PlayWith {
            get {
                return ResourceManager.GetString("ReplaysTab_PlayWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Show details.
        /// </summary>
        public static string ReplaysTab_ShowDetails {
            get {
                return ResourceManager.GetString("ReplaysTab_ShowDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Show file in folder.
        /// </summary>
        public static string ReplaysTab_ShowFileInFolder {
            get {
                return ResourceManager.GetString("ReplaysTab_ShowFileInFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Upload replay to server.
        /// </summary>
        public static string ReplaysTab_UploadBtn {
            get {
                return ResourceManager.GetString("ReplaysTab_UploadBtn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Upload selected replays to server.
        /// </summary>
        public static string ReplaysTab_UploadMultipleBtn {
            get {
                return ResourceManager.GetString("ReplaysTab_UploadMultipleBtn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Combat Officer.
        /// </summary>
        public static string Role_commander {
            get {
                return ResourceManager.GetString("Role_commander", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Intelligence Officer.
        /// </summary>
        public static string Role_diplomat {
            get {
                return ResourceManager.GetString("Role_diplomat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Junior Officer.
        /// </summary>
        public static string Role_junior_officer {
            get {
                return ResourceManager.GetString("Role_junior_officer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Commander.
        /// </summary>
        public static string Role_leader {
            get {
                return ResourceManager.GetString("Role_leader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Personnel Officer.
        /// </summary>
        public static string Role_personnel_officer {
            get {
                return ResourceManager.GetString("Role_personnel_officer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Private.
        /// </summary>
        public static string Role_private {
            get {
                return ResourceManager.GetString("Role_private", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Recruit.
        /// </summary>
        public static string Role_recruit {
            get {
                return ResourceManager.GetString("Role_recruit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Recruitment Officer.
        /// </summary>
        public static string Role_recruiter {
            get {
                return ResourceManager.GetString("Role_recruiter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reservist.
        /// </summary>
        public static string Role_reservist {
            get {
                return ResourceManager.GetString("Role_reservist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Quartermaster.
        /// </summary>
        public static string Role_treasurer {
            get {
                return ResourceManager.GetString("Role_treasurer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Executive Officer.
        /// </summary>
        public static string Role_vice_leader {
            get {
                return ResourceManager.GetString("Role_vice_leader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Add client.
        /// </summary>
        public static string Settings_Add {
            get {
                return ResourceManager.GetString("Settings_Add", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Auto.
        /// </summary>
        public static string Settings_Auto {
            get {
                return ResourceManager.GetString("Settings_Auto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Auto load statistic.
        /// </summary>
        public static string Settings_AutoLoadStatistic {
            get {
                return ResourceManager.GetString("Settings_AutoLoadStatistic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle mode.
        /// </summary>
        public static string Settings_BattleMode {
            get {
                return ResourceManager.GetString("Settings_BattleMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Path to game cache.
        /// </summary>
        public static string Settings_CacheFolder {
            get {
                return ResourceManager.GetString("Settings_CacheFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Check for updates on start.
        /// </summary>
        public static string Settings_CheckForUpdatesOnStart {
            get {
                return ResourceManager.GetString("Settings_CheckForUpdatesOnStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Language.
        /// </summary>
        public static string Settings_Language {
            get {
                return ResourceManager.GetString("Settings_Language", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Period.
        /// </summary>
        public static string Settings_Period {
            get {
                return ResourceManager.GetString("Settings_Period", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Player Name.
        /// </summary>
        public static string Settings_PlayerName {
            get {
                return ResourceManager.GetString("Settings_PlayerName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Play with selected.
        /// </summary>
        public static string Settings_PlayWithSelected {
            get {
                return ResourceManager.GetString("Settings_PlayWithSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Region.
        /// </summary>
        public static string Settings_Region {
            get {
                return ResourceManager.GetString("Settings_Region", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Replays folder.
        /// </summary>
        public static string Settings_ReplaysFolder {
            get {
                return ResourceManager.GetString("Settings_ReplaysFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Save.
        /// </summary>
        public static string Settings_Save {
            get {
                return ResourceManager.GetString("Settings_Save", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Show entended replay&apos;s data.
        /// </summary>
        public static string Settings_ShowEntendedReplaysData {
            get {
                return ResourceManager.GetString("Settings_ShowEntendedReplaysData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Try to find trank analog in expected values.
        /// </summary>
        public static string Settings_TryFindTankAnalog {
            get {
                return ResourceManager.GetString("Settings_TryFindTankAnalog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на World of tanks catalog.
        /// </summary>
        public static string Settings_WotFolder {
            get {
                return ResourceManager.GetString("Settings_WotFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All observation period.
        /// </summary>
        public static string StatisticPeriod_AllObservationPeriod {
            get {
                return ResourceManager.GetString("StatisticPeriod_AllObservationPeriod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Results from {0}.
        /// </summary>
        public static string StatisticPeriod_Custom {
            get {
                return ResourceManager.GetString("StatisticPeriod_Custom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Custom.
        /// </summary>
        public static string StatisticPeriod_Custom_ComboItem {
            get {
                return ResourceManager.GetString("StatisticPeriod_Custom_ComboItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Last {0} Battles results.
        /// </summary>
        public static string StatisticPeriod_LastNBattles {
            get {
                return ResourceManager.GetString("StatisticPeriod_LastNBattles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Last N Battles.
        /// </summary>
        public static string StatisticPeriod_LastNBattles_ComboItem {
            get {
                return ResourceManager.GetString("StatisticPeriod_LastNBattles_ComboItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Last week.
        /// </summary>
        public static string StatisticPeriod_LastWeek {
            get {
                return ResourceManager.GetString("StatisticPeriod_LastWeek", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Recent.
        /// </summary>
        public static string StatisticPeriod_Recent {
            get {
                return ResourceManager.GetString("StatisticPeriod_Recent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Replays selected: .
        /// </summary>
        public static string StatusBar_SelectedCount {
            get {
                return ResourceManager.GetString("StatusBar_SelectedCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Awards.
        /// </summary>
        public static string Tab_Awards {
            get {
                return ResourceManager.GetString("Tab_Awards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Achievements.
        /// </summary>
        public static string Tab_Header_Achievements {
            get {
                return ResourceManager.GetString("Tab_Header_Achievements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Average Performance.
        /// </summary>
        public static string Tab_Header_AveragePerformance {
            get {
                return ResourceManager.GetString("Tab_Header_AveragePerformance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Balancer.
        /// </summary>
        public static string Tab_Header_Balancer {
            get {
                return ResourceManager.GetString("Tab_Header_Balancer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle awards.
        /// </summary>
        public static string Tab_Header_BattleAwards {
            get {
                return ResourceManager.GetString("Tab_Header_BattleAwards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battles.
        /// </summary>
        public static string Tab_Header_Battles {
            get {
                return ResourceManager.GetString("Tab_Header_Battles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Charts.
        /// </summary>
        public static string Tab_Header_Chart {
            get {
                return ResourceManager.GetString("Tab_Header_Chart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Clan battles.
        /// </summary>
        public static string Tab_Header_ClanBattles {
            get {
                return ResourceManager.GetString("Tab_Header_ClanBattles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Common.
        /// </summary>
        public static string Tab_Header_Common {
            get {
                return ResourceManager.GetString("Tab_Header_Common", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage.
        /// </summary>
        public static string Tab_Header_Damage {
            get {
                return ResourceManager.GetString("Tab_Header_Damage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Epics.
        /// </summary>
        public static string Tab_Header_Epics {
            get {
                return ResourceManager.GetString("Tab_Header_Epics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Frag counts.
        /// </summary>
        public static string Tab_Header_FragCounts {
            get {
                return ResourceManager.GetString("Tab_Header_FragCounts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Frags.
        /// </summary>
        public static string Tab_Header_Frags {
            get {
                return ResourceManager.GetString("Tab_Header_Frags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Maps Statistic.
        /// </summary>
        public static string Tab_Header_MapsStatistic {
            get {
                return ResourceManager.GetString("Tab_Header_MapsStatistic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на MasterTanker.
        /// </summary>
        public static string Tab_Header_MasterTanker {
            get {
                return ResourceManager.GetString("Tab_Header_MasterTanker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Medals.
        /// </summary>
        public static string Tab_Header_Medals {
            get {
                return ResourceManager.GetString("Tab_Header_Medals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Overall.
        /// </summary>
        public static string Tab_Header_Overall {
            get {
                return ResourceManager.GetString("Tab_Header_Overall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Overall performance.
        /// </summary>
        public static string Tab_Header_OverallPerformance {
            get {
                return ResourceManager.GetString("Tab_Header_OverallPerformance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Performance.
        /// </summary>
        public static string Tab_Header_Performance {
            get {
                return ResourceManager.GetString("Tab_Header_Performance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Performance 8.8.
        /// </summary>
        public static string Tab_Header_Performance88 {
            get {
                return ResourceManager.GetString("Tab_Header_Performance88", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Performance Progress.
        /// </summary>
        public static string Tab_Header_PerformanceProgress {
            get {
                return ResourceManager.GetString("Tab_Header_PerformanceProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ratings.
        /// </summary>
        public static string Tab_Header_Ratings {
            get {
                return ResourceManager.GetString("Tab_Header_Ratings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Recent.
        /// </summary>
        public static string Tab_Header_Recent {
            get {
                return ResourceManager.GetString("Tab_Header_Recent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Replays Manager.
        /// </summary>
        public static string Tab_Header_Replays {
            get {
                return ResourceManager.GetString("Tab_Header_Replays", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Series.
        /// </summary>
        public static string Tab_Header_Series {
            get {
                return ResourceManager.GetString("Tab_Header_Series", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Session.
        /// </summary>
        public static string Tab_Header_Session {
            get {
                return ResourceManager.GetString("Tab_Header_Session", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Special awards.
        /// </summary>
        public static string Tab_Header_SpecialAwards {
            get {
                return ResourceManager.GetString("Tab_Header_SpecialAwards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Time.
        /// </summary>
        public static string Tab_Header_Time {
            get {
                return ResourceManager.GetString("Tab_Header_Time", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Vehicles.
        /// </summary>
        public static string Tab_Header_Vehicles {
            get {
                return ResourceManager.GetString("Tab_Header_Vehicles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Win Rate.
        /// </summary>
        public static string Tab_Header_WinRate {
            get {
                return ResourceManager.GetString("Tab_Header_WinRate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на WN8.
        /// </summary>
        public static string Tab_Header_WN8 {
            get {
                return ResourceManager.GetString("Tab_Header_WN8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на XP.
        /// </summary>
        public static string Tab_Header_XP {
            get {
                return ResourceManager.GetString("Tab_Header_XP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All captured results.
        /// </summary>
        public static string TabHeader_AllObservationPeriod {
            get {
                return ResourceManager.GetString("TabHeader_AllObservationPeriod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Results from {0}.
        /// </summary>
        public static string TabHeader_Custom {
            get {
                return ResourceManager.GetString("TabHeader_Custom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Last {0} Battles results.
        /// </summary>
        public static string TabHeader_LastNBattles {
            get {
                return ResourceManager.GetString("TabHeader_LastNBattles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Last week results.
        /// </summary>
        public static string TabHeader_LastWeek {
            get {
                return ResourceManager.GetString("TabHeader_LastWeek", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Last day results.
        /// </summary>
        public static string TabHeader_Recent {
            get {
                return ResourceManager.GetString("TabHeader_Recent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All.
        /// </summary>
        public static string TankFilterPanel_All {
            get {
                return ResourceManager.GetString("TankFilterPanel_All", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All.
        /// </summary>
        public static string TankFilterPanel_All1 {
            get {
                return ResourceManager.GetString("TankFilterPanel_All1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Country.
        /// </summary>
        public static string TankFilterPanel_Country {
            get {
                return ResourceManager.GetString("TankFilterPanel_Country", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Default.
        /// </summary>
        public static string TankFilterPanel_Default {
            get {
                return ResourceManager.GetString("TankFilterPanel_Default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Favorite.
        /// </summary>
        public static string TankFilterPanel_Favorite {
            get {
                return ResourceManager.GetString("TankFilterPanel_Favorite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Levels.
        /// </summary>
        public static string TankFilterPanel_Levels {
            get {
                return ResourceManager.GetString("TankFilterPanel_Levels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Map.
        /// </summary>
        public static string TankFilterPanel_Map {
            get {
                return ResourceManager.GetString("TankFilterPanel_Map", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Premium.
        /// </summary>
        public static string TankFilterPanel_Premium {
            get {
                return ResourceManager.GetString("TankFilterPanel_Premium", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tank.
        /// </summary>
        public static string TankFilterPanel_Tank {
            get {
                return ResourceManager.GetString("TankFilterPanel_Tank", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Types.
        /// </summary>
        public static string TankFilterPanel_Types {
            get {
                return ResourceManager.GetString("TankFilterPanel_Types", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на HT.
        /// </summary>
        public static string TankType_HT {
            get {
                return ResourceManager.GetString("TankType_HT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на LT.
        /// </summary>
        public static string TankType_LT {
            get {
                return ResourceManager.GetString("TankType_LT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на MT.
        /// </summary>
        public static string TankType_MT {
            get {
                return ResourceManager.GetString("TankType_MT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на SPG.
        /// </summary>
        public static string TankType_SPG {
            get {
                return ResourceManager.GetString("TankType_SPG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на TD.
        /// </summary>
        public static string TankType_TD {
            get {
                return ResourceManager.GetString("TankType_TD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Awarded in one of four classes for the total number of team victories in which the player survived the battle: Class IV - 5 victories Class III - 50 victories Class II - 500 victories Class I - 5,000 victories
        ///
        ///General Creighton Abrams commanded US armored forces during WWII and the Vietnam War, earning a reputation as an aggressive and successful commander..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Abrams {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Abrams", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy an enemy vehicle by setting it on fire.
        ///    • No more than one award per player in a battle.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Arsonist {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Arsonist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Awarded for individual battles if all of the requirements are met..
        /// </summary>
        public static string Tooltip_Achievements_15x15_BattleHero {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_BattleHero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy at least 2 enemy vehicles while having 5 different modules damaged or crew members injured and losing 80% of hit points.
        ///    • Survive and win the battle.
        ///    • Destroyed enemy vehicles count after all damage is received.
        ///    • Can be obtained in Random Battles only.
        ///
        ///Pierre Billotte was a captain in the French Army who destroyed 2 PzKpfw IV, 11 PzKpfw III and two guns with his Char B1 bis on May 16th, 1940..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Billotte {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Billotte", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy 7 or more enemy vehicles with a tank or tank destroyer, or 10 or more vehicles with a self-propelled gun.
        ///• The targets had to be enemy vehicles of Tiers IV-X.
        ///• Awarded before the release of 0.8.0 version.
        ///
        ///Johannes Bölter was one of the most successful German tank aces of WWII. He participated in operations in the invasions of Poland, France, 
        ///Greece, and the Soviet Union, as well as in the defense of France..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Boelter {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Boelter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy at least 2 enemy vehicles with one shell.
        ///    • Series achieved in all vehicles are added together.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Bombardier {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Bombardier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage enemy vehicles&apos; modules or injure crew members at least five times in a battle.
        ///    • Modules damaged by fire are counted.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Bonecrusher {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Bonecrusher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Each Platoon member must destroy at least 3 enemy vehicles.
        ///    • All Platoon members must survive the battle.
        ///    • All Platoon members receive the award.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_BrothersInArms {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_BrothersInArms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy 3-4 enemy vehicles while having 5 different modules damaged or crew members injured and losing 80% of hit points.
        ///    • Survive and win the battle.
        ///    • Destroyed enemy vehicles count after all damage is received.
        ///    • Can be obtained in Random Battles only.
        ///    
        ///Pietro Bruno was an Italian tank ace. For exceptional valor in the face of the enemy he was awarded the Gold Medal of Military Valor (Medaglia d&apos;oro al Valore Militare), the highest Italian award.
        ///.
        /// </summary>
        public static string Tooltip_Achievements_15x15_BrunoPietro {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_BrunoPietro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy 5 SPGs in the course of one battle.
        ///    • Drive a tank or a tank destroyer.
        ///    • Can be obtained in Random Battles only.
        ///
        ///Guards Colonel Alexander Burda was a Soviet tank ace and a Hero of the Soviet Union. On October 4th, 1941, Burda organized an ambush that destroyed an enemy armored column, including ten medium and light tanks, two trucks with antitank guns, and five infantry vehicles..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Burda {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Burda", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Awarded for the destruction of enemy tanks and self-propelled guns in four classes:Class IV - 10 vehicles Class III - 100 vehicles Class II - 1,000 vehicles Class I - 10,000 vehicles
        ///
        ///Otto Carius was one of the most efficient tank aces of WWII. He commanded the PzKpfw 38 (t), the PzKpfw VI Tiger and the Jagdtiger tank destroyer during his impressive career..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Carius {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Carius", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survive and win the battle, having received damage from at least four different enemy vehicles.
        ///    • Only hits that caused damage are included.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Charmed {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Charmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage more enemy vehicles or destroy their tracks, at least 6, than any other player.
        ///    • Targets that were destroyed or lost in battle are included. 
        ///    • Ricochet and non-penetration are not included.
        ///    • If two or more players score an equal number of hits, the achievement is awarded to the player who earned more XP in the battle.
        ///    • The achievement is only awarded once per battle.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Confederate {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Confederate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Platoon must destroy at least 12 enemy vehicles.
        ///    • All Platoon members receive the award.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_CrucialContribution {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_CrucialContribution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reduce the number of enemy capture points of a friendly base by 70 or more.
        ///    • If two or more players have an equal number of capture points, the achievement is awarded to the player who earned more XP in the battle.
        ///    • The achievement is only awarded once per battle.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Defender {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Defender", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Awarded to a player who in the course of one battle destroys four enemy vehicles within a base circle while they are attempting to capture the base. Enemy vehicles may attempt to capture the base all at once or in turn.
        ///
        ///On 13 September 1944, Colonel Paul Girot de Langlade&apos;s Groupement Tactique &quot;Langlade&quot; (G.T.L), outnumbered by over two to one, attacked a German 112th Panzer Regiment occupying the French village of Dompaire. In the ensuing battle de Langlade&apos;s 16 M4A2 tanks and 4 M10 tank destroyers, wit [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Tooltip_Achievements_15x15_DeLanglade {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_DeLanglade", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy an enemy vehicle by causing its ammunition to explode.
        ///    • No more than one award per player in a battle.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Demolition {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Demolition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy at least two enemy vehicles that caused damage to your vehicle in the battle.
        ///    • Damage to modules is included.
        ///    • Ricochet and non-penetration are not included.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Duelist {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Duelist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy 4 enemy SPGs in one battle.
        ///    • Drive a tank or a tank destroyer.
        ///    • Can be obtained in Random Battles only.
        ///
        ///Ion S. Dumitru was a Romanian tank ace. He fought in World War II for just twenty-five days, for five on the German side, and, after Romania changed sides, 
        ///for twenty days against the Germans. On March 26th, 1945, Dumitru contributed to the destruction of six enemy tank destroyers and capture of a battery of 150-mm howitzers..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Dumitru {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Dumitru", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Awarded in four classes for destroying tier 8, 9 or 10 enemy tanks and self-propelled guns: Class IV - 3 vehicles Class III - 30 vehicles Class II - 300 vehicles Class I - 3,000 vehicles
        ///
        ///Joe Ekins was a private in the Northamptonshire Division of the British Territorial Army. A number of sources confirm Ekins as the final nemesis of famous German tank ace Michael Wittmann..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Ekins {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Ekins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Help your team damage at least 6 enemy vehicles by spotting them.
        ///    • The player must be the only one spotting the enemy vehicles at the moment when they are damaged.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Even {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Even", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy the last enemy vehicle in the battle with the last shell in the ammo.
        ///    • Awarded even if the enemy vehicle is destroyed by a fire caused by the last shell in the ammo.
        ///    • Awarded for destroying the last enemy vehicle with the last shell using autoloading guns and machineguns.
        ///    • Can be obtained in Random Battles only.
        ///
        ///A Hero of the Soviet Union, Alexander Fadin was a T-34 commander. Supported by one infantry platoon, Fadin managed to capture the village of Dashukovka (Ukraine) 
        ///and h [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Tooltip_Achievements_15x15_Fadin {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Fadin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy four or five enemy vehicles in one battle.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Fighter {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Fighter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy at least 3 enemy tanks or tank destroyers with a tank destroyer in one battle.
        ///    • The targets must be at least two tiers higher than the player&apos;s tank destroyer.
        ///    • Can be obtained in Random Battles only.
        ///
        ///Erkki Halonen, a sergeant in the Finnish Army and a tank ace, destroyed three T-34&apos;s, two KV-1&apos;s, and two ISU-152&apos;s with his StuG III in battles during June and July 1944.
        ///.
        /// </summary>
        public static string Tooltip_Achievements_15x15_Halonen {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Halonen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy at least 14 enemy vehicles in the course of one battle.
        ///    • Can be obtained in Random Battles only.
        ///
        ///In June 1941, near the Lithuanian town of Raseiniai, roughly 20 KV tanks of the Soviet 3rd Mechanized Corps met the assault of the 6th Panzer Division, 
        ///with approximately 100 vehicles. A single KV tank managed to hold off the German advance for a full day while being pummeled by a variety of antitank weapons, until finally the KV ran out of ammunition and was knocked out..
        /// </summary>
        public static string Tooltip_Achievements_15x15_HeroesOfRaseiniai {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_HeroesOfRaseiniai", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy 100 vehicles of the &quot;feline family&quot; including:
        ///    • Aufklärungspanzer Panther
        ///    • PzKpfw V Panther
        ///    • Panther II
        ///    • Panther-M10
        ///    • Jagdpanther
        ///    • Jagdpanther II
        ///    • GW Panther
        ///    
        ///    • PzKpfw VI Tiger
        ///    • PzKpfw VI Tiger (P)
        ///    • PzKpfw VI Ausf. B Tiger II
        ///    • Jagdtiger
        ///    • 8.8 cm Pak43 JagdTiger
        ///    • GW Tiger
        ///    • GW Tiger (P)
        ///    
        ///    • Löwe
        ///    
        ///    • Leopard prototyp A
        ///    • Leopard 1
        ///    
        ///    • Total results in all vehicles are included.
        ///    •  [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Tooltip_Achievements_15x15_Hunter {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Hunter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy all enemy light tanks (at least 3) in the course of one battle.
        ///    • Can be obtained in Random Battles only.
        ///    
        ///Sergeant Grigoriy Naydin was a BT-7 commander. On June 25th, 1941, near the Lithuanian town of Rudishkyay, he destroyed a Wehrmacht armored column 
        ///that included 15 vehicles and 10 guns of the 19th Mechanized Corps. Naydin managed to hold off the German advance for two days, 
        ///making it possible to organize the defenses around Vilnius. For this action, Naydin was made a Hero of the  [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Tooltip_Achievements_15x15_Huntsman {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Huntsman", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Have total damage blocked by armor exceed the hit points of your vehicle.
        ///    • Survive the battle.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Impenetrable {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Impenetrable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Score at least 80 capture points on the enemy base.
        ///    • The achievement is awarded upon successful base capture, and only includes the points that were part of the base capture.
        ///    • Can be obtained in Random Battles only.
        ///.
        /// </summary>
        public static string Tooltip_Achievements_15x15_Invader {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Invader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survive 5 or more battles in a row without taking any damage.
        ///    • An unbroken series continues in the next battle using the same vehicle.
        ///    • Every vehicle has its own series. Only the longest series is counted.
        ///    • Battles fought in SPGs do not count.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Invincible {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Invincible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survive at least 10 ricochets and non-penetrations in a row from enemy team players.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_IronMan {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_IronMan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy enemy vehicle by ramming it.
        ///    • Destroy a higher tier enemy vehicle.
        ///    • The achievement is only awarded once per battle.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Kamikaze {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Kamikaze", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Awarded for achieving the Battle Hero status in four classes:Class IV - 1 time Class III - 10 times Class II - 100 times Class I - 1,000 times
        ///
        ///Douglas Kay, a British Army sergeant and gunner on a Sherman Firefly, participated in the Allied landing in Normandy and later helped increase popular interest in tank warfare..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Kay {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Kay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Awarded for the total amount of damage caused and received in four classes: Class IV - 10,000 HP Class III - 100,000 HP Class II - 1,000,000 HP Class I - 10,000,000 HP
        ///
        ///Kurt Knispel, a German tank ace during WWII, participated in battles on both the Western and Eastern Fronts fighting on PzKpfw II, PzKpfw III, PzKpfw IV, PzKpfw VI Tiger, and PzKpfw VIB Tiger II..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Knispel {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Knispel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Stand alone against five enemy vehicles and win.
        ///    • Can be obtained in Random Battles only.
        ///    
        ///Colonel Zinoviy Kolobanov was a Soviet tank ace who destroyed 22 German tanks, two guns, and two armored vehicles with his KV-1 in battle on August 19th, 1941.
        ///.
        /// </summary>
        public static string Tooltip_Achievements_15x15_Kolobanov {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Kolobanov", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy 10–13 enemy vehicles in one battle.
        ///    • In vehicles of at least Tier V.
        ///    • Can be obtained in Random Battles only.
        ///
        ///Lafayette G. Pool is widely recognized as the U.S. tank ace of aces who destroyed a total of 258 armored vehicles and military vehicles.
        ///.
        /// </summary>
        public static string Tooltip_Achievements_15x15_LafayettePool {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_LafayettePool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Awarded for reducing the total number of capture points of a friendly base, up to 100 points per battle. This award is established in four classes: Class IV - 30 points Class III - 300 points Class II - 3,000 points Class I - 30,000 points
        ///
        ///Dmitry Lavrinenko, a Hero of the Soviet Union, Guards Lieutenant, and tank ace was recognized as the most efficient Soviet tanker, destroying 52 tanks in 28 battles over the course of just two months..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Lavrinenko {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Lavrinenko", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Awarded for the total amount of the player&apos;s enemy base capture points. An unsuccessful or reduced capture does not count toward this number. The award is established in four classes: Class IV - 30 points Class III - 300 points Class II - 3,000 points Class I - 30,000 points
        ///
        ///Philippe Leclerc was a General of the Free French Forces during WWII and one of the leaders of the Paris liberation operation..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Leclerk {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Leclerk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy 2 enemy tanks or tank destroyers with a medium tank in one battle.
        ///    • The enemy vehicles must be at least 2 tiers higher.
        ///    • Can be obtained in Random Battles only.
        ///
        ///Reino Lehväslaiho was a Finnish tank ace who destroyed seven tanks and tank destroyers..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Lehvaslaiho {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Lehvaslaiho", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Witness an enemy vehicle being shot and destroyed by another enemy team player. You must be 10 meters or less from the enemy vehicle at the moment of its destruction.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Lucky {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Lucky", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cause the highest damage per battle.
        ///    • Damage caused must be at least 20% of the total HP of enemy vehicles.
        ///    • Damage caused must be at least 1,000 HP.
        ///    • The player must not hit any allies by direct shots.
        ///    • If two or more players have caused equal damage to enemy vehicles, the achievement is awarded to the player who earned more XP for the battle.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_MainGun {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_MainGun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Achieve at least five armor penetrating hits in a row against enemy vehicles. The results of the next battle in a row using any vehicle also count towards this number, unless the sequence is broken by a miss, non-penetration or ricochet. The icon in the service record displays the longest sequence..
        /// </summary>
        public static string Tooltip_Achievements_15x15_MasterGunner {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_MasterGunner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Spot enemy vehicles, enabling your allies to cause 1,000 HP of damage in one battle.
        ///    • Win the battle.
        ///    • The series is extended for every 1,000 HP of damage caused by allies to enemy vehicles spotted by you in one battle.
        ///    • Every vehicle has its own series.
        ///    • Only the longest series is counted.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_MaxAimerSeries {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_MaxAimerSeries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на In a battle, destroy all enemy SPGs (at least 3) with an SPG.
        ///    • The player must not destroy any allied vehicles.
        ///    • Can be obtained in Random Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_15x15_MedalAntiSpgFire {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_MedalAntiSpgFire", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy at least 2 enemy light tanks from a distance of not more than 100 meters.
        ///    • Drive an SPG of at least Tier IV.
        ///    • The player must not destroy any allied vehicles.
        ///    • Can be obtained in Random Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_15x15_MedalCoolBlood {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_MedalCoolBlood", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Drive an SPG and cause damage exceeding 10 times the hit points of your vehicle.
        ///    • The player must not destroy any allied vehicles.
        ///    • Hits on allied vehicles are not counted.
        ///    • Can be obtained in Random Battles only.
        ///
        ///British colonel Adrian Clements Gore was in charge of a combat team that defended the Kasserine Pass, Tunisia, on 20 February, 1943. His force, composed of a tank squadron, an infantry company, and a battery of infantry support artillery, put up stiff resistance against troops [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Tooltip_Achievements_15x15_MedalGore {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_MedalGore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на While driving an SPG, destroy an enemy vehicle by ramming and survive.
        ///    • SPG&apos;s speed must be less than 10 km/h.
        ///    • The player must not destroy any allied vehicles.
        ///    • Can be obtained in Random Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_15x15_MedalMonolith {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_MedalMonolith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на While driving an SPG, destroy at least 2 enemy vehicles and receive at least 2 enemy hits that cause damage or are blocked by armor.
        ///    • Survive a battle.
        ///    • Total amount of damage received and damage blocked by armor must be at least 2/3 of the hit points of your vehicle.
        ///    • Hitting allied vehicles is not counted.
        ///    • Can be obtained in Random Battles only.
        ///
        ///Colonel Alexander Stark commanded the joint French-American task force defending the Kasserine Pass, Tunisia. On 19 February, 1943, St [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Tooltip_Achievements_15x15_MedalStark {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_MedalStark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy 10 or more PzKpfw VIII Maus tanks.
        ///    • Total results in all vehicles are included.
        ///    • Newly received awards are added together.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_15x15_MouseTrap {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_MouseTrap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy at least 4 enemy tanks or tank destroyers with a medium tank in one battle.
        ///    • The enemy vehicles must be at least 2 tiers higher.
        ///    • Can be obtained in Random Battles only.
        ///
        ///Alfie Nicols was a British tank gunner. During the battle of Al Alamein he destroyed fourteen enemy vehicles..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Nikolas {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Nikolas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy three or more enemy tanks or tank destroyers with a light tank in one battle.
        ///    • The enemy vehicles must be at least 2 tiers higher.
        ///    • Can be obtained in Random Battles only.
        ///
        ///Roman Edmund Orlik, a Polish Army sergeant, was a tank ace who knocked out 13 German tanks with his light TKS tankette in September 1939..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Orlik {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Orlik", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy at least 3 enemy tanks or tank destroyers with a medium tank in one battle.
        ///    • The enemy vehicles must be at least 2 tiers higher.
        ///    • Can be obtained in Random Battles only.
        ///    
        ///Alexander Oskin, a Hero of the Soviet Union, was a tank commander who destroyed three King Tigers with his T-34 during a reconnaissance operation near Oglenduv on August 11th, 1944..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Oskin {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Oskin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy 3 enemy SPGs in one battle.
        ///    • Drive a tank or a tank destroyer.
        ///    • Can be obtained in Random Battles only.
        ///
        ///Second Lieutenant Luigi Arbib Pascucci was an Italian tank commander during World War Two. He fought with the Ariete Tank Division in North Africa. Pascucci fought in the Second Battle of El Alamein, where he sacrificed his life in a reckless frontal attack that enabled the rest of his company to escape encirclement..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Pascucci {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Pascucci", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Help your team damage at least 6 enemy vehicles by spotting them.
        ///    • The player must be the only one spotting the enemy vehicles at the moment when they are damaged.
        ///    • If two or more players have spotted an equal number of enemy vehicles for damaging by teammates, the achievement is awarded to the player who earned more XP in the battle.
        ///    • The achievement is only awarded once per battle.
        ///    • Can be obtained in Random Battles only.
        ///.
        /// </summary>
        public static string Tooltip_Achievements_15x15_PatrolDuty {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_PatrolDuty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy 100 Patton tanks, including:
        ///    • M46 Patton
        ///    • M48A1 Patton III
        ///    • M60
        ///    
        ///    • Series achieved in all vehicles are added together.
        ///    • Newly received awards are added together..
        /// </summary>
        public static string Tooltip_Achievements_15x15_PattonValley {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_PattonValley", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Awarded for detecting enemy tanks and self-propelled guns in all battles, in four classes: Class IV - 20 vehicles Class III - 200 vehicles Class II - 2,000 vehicles Class I - 20,000 vehicles
        ///
        ///Lieutenant General of Tank Forces, Nikolay Popel, a Soviet military leader and political worker, organized a raid against the enemy rear using captured vehicles during the battle of Dubno in the Summer of 1941..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Poppel {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Poppel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy 8 or 9 enemy vehicles in one battle.
        ///    • In vehicles of at least Tier V.
        ///    • Can be obtained in Random Battles only.
        ///
        ///Sydney Valpy Radley-Walters was a Canadian tank ace of the 27th Armored Regiment. In 1944–1945 he destroyed 18 German vehicles with his Sherman Firefly..
        /// </summary>
        public static string Tooltip_Achievements_15x15_RadleyWalters {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_RadleyWalters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Remain undetected throughout the entire battle and be the only player who captures the enemy base.
        ///    • Remain within the base circle while attempting to capture the enemy base.
        ///    • The achievement is awarded even if the vehicle was accidentally hit or damaged.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Raider {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Raider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy three or more enemy vehicles in a row with a single round each. The achievement is granted on completion of the sequence. The sequence can be continued in the next battle fought on any vehicle. The icon in the service record displays the longest sequence..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Reaper {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Reaper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Detect more enemy vehicles than anyone else in your team (at least 9).
        ///    • Win the battle.
        ///    • The achievement is only awarded once per battle
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Scout {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Scout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Hit enemy vehicles with 10 or more consecutive shots.
        ///    • The series is broken by a miss.
        ///    • Every vehicle has its own series that continues to the next battle using the same vehicle.
        ///    • Only the longest series is counted.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Sharpshooter {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Sharpshooter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cause more damage to enemy vehicles than the hit points of your vehicle.
        ///    • Damage caused by ramming or setting enemy vehicle on fire is included.
        ///    • Unavailable for SPGs.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_ShootToKill {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_ShootToKill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy at least 100 tanks of the IS series and vehicles based on their chassis, including:
        ///    • IS
        ///    • IS-3
        ///    • IS-4
        ///    • IS-6
        ///    • IS-7
        ///    • IS-8
        ///    
        ///    • ISU-152
        ///    
        ///    • Object 261
        ///    • Object 263
        ///    • Object 268
        ///    • Object 704
        ///    
        ///    • Only vehicles in the U.S.S.R. Tech Tree are included.
        ///    • Series achieved in all vehicles are added together.
        ///    • Newly received awards are added together..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Sinai {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Sinai", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Achieve at least 85% hits out of a minimum of 10 shots fired with potential damage of 1,000 HP or more.
        ///    • Non-penetrating hits were included.
        ///    • Direct hits on friendly vehicles were not allowed.
        ///    • If two or more players had identical hit ratios, the achievement was awarded to the player with the highest number of hits.
        ///    • If two or more players had identical hit ratios and the same number of hits, the achievement was awarded to the player who had earned more XP for the battle.
        ///    • The  [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Tooltip_Achievements_15x15_Sniper {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Sniper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cause the highest damage per battle at a distance of at least 300 meters.
        ///    • Fire at least 8 shots.
        ///    • Firing accuracy must be at least 85% per battle.
        ///    • At least 80% of hits must cause damage, including damage to enemy vehicles and modules.
        ///    • The player must cause more damage than the hit points of the player&apos;s vehicle, at least 1,000 hit points.
        ///    • The player must not hit any allies by direct shots.
        ///    • The achievement is only awarded once per battle.
        ///    • Unavailable for SPGs.        /// [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Tooltip_Achievements_15x15_Sniper2 {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Sniper2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Receive the highest damage (at least 1,000 HP), including damage blocked by armor.
        ///    • Survive the battle.
        ///    • Receive at least 11 hits and the highest damage blocked by armor.
        ///    • If two or more players received the same amount of damage blocked by armor, the achievement is awarded to the player who received the greatest number of hits.
        ///    • If two or more players received the same amount of damage blocked by armor and an equal number of hits, the achievement is awarded to the player who earned  [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Tooltip_Achievements_15x15_SteelWall {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_SteelWall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survive a ricochet or non-penetration from an enemy team player. Your vehicle must have less than 10% of its hit points left.
        ///    • Survive the battle.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Sturdy {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Sturdy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Survive 20 battles in a row using the same vehicle.
        ///    • An unbroken series continues in the next battle using the same vehicle.
        ///    • Every vehicle has its own series. Only the longest series is counted.
        ///    • Battles fought in SPGs do not count.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Survivor {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Survivor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy at least 3 enemy self-propelled guns with a light tank in the course of one battle.
        ///    • Survive the battle.
        ///    • Destroyed enemy vehicles must be at least 2 tiers higher than the player&apos;s tank.
        ///    • Can be obtained in Random Battles only.
        ///
        ///Tamada Yoshio commanded the Japanese 4th Tank Regiment (Type 95 Ha-Gō light tanks) in an attack that overran and destroyed twelve Russian artillery guns during the Second Sino-Japanese War in July 1939..
        /// </summary>
        public static string Tooltip_Achievements_15x15_TamadaYoshio {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_TamadaYoshio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy at least 5 enemy vehicles while having 5 different modules damaged or crew members injured and losing 80% of hit points.
        ///    • Survive and win the battle.
        ///    • Destroyed enemy vehicles count after all damage is received.
        ///    • Can be obtained in Random Battles only.
        ///
        ///Ervin Tarczay was a Hungarian tank ace. He fought with the Hungarian 2nd Armored Division and destroyed at least ten enemy vehicles..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Tarczay {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Tarczay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy more enemy vehicles than any other player in your team during the battle (at least 6).
        ///    • If two or more players have destroyed an equal number of vehicles, the achievement is awarded to the player who earned more XP for the battle.
        ///    • The achievement is only awarded once per battle.
        ///    • Can be obtained in Random Battles only..
        /// </summary>
        public static string Tooltip_Achievements_15x15_Warrior {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_15x15_Warrior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy all enemy vehicles while losing only one friendly vehicle.
        ///    • Win the battle.
        ///    • Awarded to all team members.
        ///    • Can be obtained in Team Battles only..
        /// </summary>
        public static string Tooltip_Achievements_7x7_ArmoredFist {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_ArmoredFist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на For the number of awards received in Team Battles.
        ///    • Can be obtained in Team Battles only..
        /// </summary>
        public static string Tooltip_Achievements_7x7_BattleTested {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_BattleTested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy 10 enemy vehicles by ramming.
        ///    • Newly received awards are added together.
        ///    • Can be obtained in Team Battles only..
        /// </summary>
        public static string Tooltip_Achievements_7x7_BruteForceMedal {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_BruteForceMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на In 20 battles, destroy the last enemy vehicle.
        ///    • Win the battle.
        ///    • Newly received awards are added together.
        ///    • Can be obtained in Team Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_7x7_CrucialShotMedal {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_CrucialShotMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на In 50 battles, comply with the following conditions:
        ///    • Spot at least 2 enemy vehicles.
        ///    • Be among the top three damage dealers.
        ///    • Newly received awards are added together.
        ///    • Can be obtained in Team Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_7x7_FightingReconnaissanceMedal {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_FightingReconnaissanceMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Receive maximum total amount of damage taken and damage blocked by armor 25 times.
        ///    • Survive a battle.
        ///    • Newly received awards are added together.
        ///    • Only victorious battles are counted.
        ///    • Can be obtained in Team Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_7x7_FireAndSteelMedal {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_FireAndSteelMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Awarded to the player for a certain number of victories on randomly selected teams.
        ///    • Can be obtained in Team Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_7x7_ForTacticalOperations {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_ForTacticalOperations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на In 100 battles, be the top player by experience earned.
        ///    • Only victorious battles are counted.
        ///    • Newly received awards are added together.
        ///    • Can be obtained in Team Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_7x7_GeniusForWarMedal {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_GeniusForWarMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на While driving an SPG, be the last survivor and win the battle.
        ///    • Newly received awards are added together.
        ///    • Can be obtained in Team Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_7x7_GodOfWar {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_GodOfWar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Remain undetected and destroy at least 10 enemy vehicles.
        ///    • Enemy vehicles must be within the vehicle&apos;s visibility range.
        ///    • Newly received awards are added together.
        ///    • Can be obtained in Team Battles only..
        /// </summary>
        public static string Tooltip_Achievements_7x7_GuerrillaMedal {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_GuerrillaMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на In 100 battles, be among the top three damage dealers.
        ///    • Newly received awards are added together.
        ///    • Only victorious battles are counted.
        ///    • Can be obtained in Team Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_7x7_HeavyFireMedal {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_HeavyFireMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Earn at least 1,000 capture points on the enemy base.
        ///    • Achievement only includes the base capture points that resulted in a successful base capture.
        ///    • Newly received awards are added together.
        ///    • Can be obtained in Team Battles only..
        /// </summary>
        public static string Tooltip_Achievements_7x7_InfiltratorMedal {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_InfiltratorMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Be the only survivor while driving a tank or a tank destroyer.
        ///    • Win the battle.
        ///    • Can be obtained in Team Battles only..
        /// </summary>
        public static string Tooltip_Achievements_7x7_KingOfTheHill {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_KingOfTheHill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на End a battle in a draw where both teams are completely destroyed.
        ///    • Awarded to all members of both teams.
        ///    • Can be obtained in Team Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_7x7_NoMansLand {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_NoMansLand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Destroy 10 enemy vehicles by exploding their ammo rack.
        ///    • Newly received awards are added together.
        ///    • All instances of destroying enemy vehicles by exploding their ammo rack are counted.
        ///    • Can be obtained in Team Battles only..
        /// </summary>
        public static string Tooltip_Achievements_7x7_PrematureDetonationMedal {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_PrematureDetonationMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на In 100 battles, be among the top three players by experience earned.
        ///    • Newly received awards are added together.
        ///    • Only victorious battles are counted.
        ///    • Can be obtained in Team Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_7x7_PromisingFighterMedal {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_PromisingFighterMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Set 10 enemy vehicles on fire.
        ///    • Newly received awards are added together.
        ///    • Can be obtained in Team Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_7x7_PyromaniacMedal {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_PyromaniacMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на • Damage or destroy enemy vehicles not visible to the player, 10 times.
        ///    • Newly received awards are added together.
        ///    • Only hits that cause damage are counted.
        ///    • Can be obtained in Team Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_7x7_RangerMedal {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_RangerMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Earn at least 1,000 base defense points.
        ///    • Only victorious battles are counted.
        ///    • Newly received awards are added together.
        ///    • Can be obtained in Team Battles only..
        /// </summary>
        public static string Tooltip_Achievements_7x7_SentinelMedal {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_SentinelMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Win at least 3 battles in a row as a member of a random team.
        ///    • Every vehicle has its own series. An unbroken series continues in the next battle using the same vehicle.
        ///    • Can be obtained in Team Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_7x7_TacticalBreakthrough {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_TacticalBreakthrough", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fight alone against at least 3 enemy vehicles and win the battle.
        ///    • Newly received awards are added together.
        ///    • Can be obtained in Team Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_7x7_WillToWinSpirit {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_WillToWinSpirit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Win 100 battles and be the top player by damage caused.
        ///    • Newly received awards are added together.
        ///    • Can be obtained in Team Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_7x7_WolfAmongSheepMedal {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_7x7_WolfAmongSheepMedal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на For the number of victories that were won while driving support vehicles.
        ///    • For example, when fighting for a team consisting of T-34 and BT-7 vehicles, it is required to drive a BT-7 tank.
        ///    • Specific vehicles can be used as support vehicles in certain Historical Battles.
        ///    • Can be obtained in Historical Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_HistoricalBattle_GuardsMan {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_HistoricalBattle_GuardsMan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на For the number of victories that were won on each of the belligerent sides.
        ///    • Can be obtained in Historical Battles only.
        ///    .
        /// </summary>
        public static string Tooltip_Achievements_HistoricalBattle_MakerOfHistory {
            get {
                return ResourceManager.GetString("Tooltip_Achievements_HistoricalBattle_MakerOfHistory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Earn more experience in a single battle than the average highest experience of 50% of all players in the same tank within the last seven days..
        /// </summary>
        public static string Tooltip_MarkOfMastery_1 {
            get {
                return ResourceManager.GetString("Tooltip_MarkOfMastery_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Earn more experience in a single battle than the average highest experience of 80% of all players in the same tank within the last seven days..
        /// </summary>
        public static string Tooltip_MarkOfMastery_2 {
            get {
                return ResourceManager.GetString("Tooltip_MarkOfMastery_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Earn more experience in a single battle than the average highest experience of 95% of all players in the same tank within the last seven days..
        /// </summary>
        public static string Tooltip_MarkOfMastery_3 {
            get {
                return ResourceManager.GetString("Tooltip_MarkOfMastery_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Earn more experience in a single battle than the average highest experience of 99% of all players in the same tank within the last seven days..
        /// </summary>
        public static string Tooltip_MarkOfMastery_4 {
            get {
                return ResourceManager.GetString("Tooltip_MarkOfMastery_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Awarded for displaying mastery in controlling a specific armored vehicle. To qualify, the amount of experience you earn in a single battle must be higher than what a percentage of other players have achieved in the same tank. Once earned on a tank, the Mastery Badge is permanent..
        /// </summary>
        public static string Tooltip_MasteryBadges {
            get {
                return ResourceManager.GetString("Tooltip_MasteryBadges", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage to Enemy Vehicles Stunned by You: {0}.
        /// </summary>
        public static string Tooltip_Replay_AssistedStun {
            get {
                return ResourceManager.GetString("Tooltip_Replay_AssistedStun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Critical damage to enemy vehicle: {0}.
        /// </summary>
        public static string Tooltip_Replay_CriticalDamage {
            get {
                return ResourceManager.GetString("Tooltip_Replay_CriticalDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage to enemy vehicle: {0}.
        /// </summary>
        public static string Tooltip_Replay_Damage {
            get {
                return ResourceManager.GetString("Tooltip_Replay_Damage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Damage by allies to enemy vehicle you detected: {0}.
        /// </summary>
        public static string Tooltip_Replay_DamageAssisted {
            get {
                return ResourceManager.GetString("Tooltip_Replay_DamageAssisted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на - radio: {0}.
        /// </summary>
        public static string Tooltip_Replay_DamageAssistedRadio {
            get {
                return ResourceManager.GetString("Tooltip_Replay_DamageAssistedRadio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на - tracks: {0}.
        /// </summary>
        public static string Tooltip_Replay_DamageAssistedTrack {
            get {
                return ResourceManager.GetString("Tooltip_Replay_DamageAssistedTrack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ricochets: {0}, Non-penetrations: {1}, Blocked by armor: {2}.
        /// </summary>
        public static string Tooltip_Replay_DamageBlockedByArmor {
            get {
                return ResourceManager.GetString("Tooltip_Replay_DamageBlockedByArmor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You detected this enemy vehicle.
        /// </summary>
        public static string Tooltip_Replay_Detected {
            get {
                return ResourceManager.GetString("Tooltip_Replay_Detected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Total.
        /// </summary>
        public static string Total {
            get {
                return ResourceManager.GetString("Total", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на For selected.
        /// </summary>
        public static string Total_ForSelected {
            get {
                return ResourceManager.GetString("Total_ForSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {0:0.00} km.
        /// </summary>
        public static string Traveled_Format {
            get {
                return ResourceManager.GetString("Traveled_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Yes.
        /// </summary>
        public static string True {
            get {
                return ResourceManager.GetString("True", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Version.
        /// </summary>
        public static string Version {
            get {
                return ResourceManager.GetString("Version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fast.
        /// </summary>
        public static string ViewerSpeed_Fast {
            get {
                return ResourceManager.GetString("ViewerSpeed_Fast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ludicrous.
        /// </summary>
        public static string ViewerSpeed_Ludicrous {
            get {
                return ResourceManager.GetString("ViewerSpeed_Ludicrous", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Real-Time.
        /// </summary>
        public static string ViewerSpeed_Normal {
            get {
                return ResourceManager.GetString("ViewerSpeed_Normal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Can&apos;t find player data in dossier cache.
        /// </summary>
        public static string WarningMsg_CanntFindPlayerDataInDossierCache {
            get {
                return ResourceManager.GetString("WarningMsg_CanntFindPlayerDataInDossierCache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Please specify player name before.
        /// </summary>
        public static string WarningMsg_SpecifyPlayerName {
            get {
                return ResourceManager.GetString("WarningMsg_SpecifyPlayerName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Auth failure.
        /// </summary>
        public static string WindowCaption_AuthFailure {
            get {
                return ResourceManager.GetString("WindowCaption_AuthFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Clan.
        /// </summary>
        public static string WindowCaption_Clan {
            get {
                return ResourceManager.GetString("WindowCaption_Clan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Compare players.
        /// </summary>
        public static string WindowCaption_ComparePlayers {
            get {
                return ResourceManager.GetString("WindowCaption_ComparePlayers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error.
        /// </summary>
        public static string WindowCaption_Error {
            get {
                return ResourceManager.GetString("WindowCaption_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Information.
        /// </summary>
        public static string WindowCaption_Information {
            get {
                return ResourceManager.GetString("WindowCaption_Information", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pack.
        /// </summary>
        public static string WindowCaption_Pack {
            get {
                return ResourceManager.GetString("WindowCaption_Pack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Replay viewers settings.
        /// </summary>
        public static string WindowCaption_ReplayViewersSettings {
            get {
                return ResourceManager.GetString("WindowCaption_ReplayViewersSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Search Clan.
        /// </summary>
        public static string WindowCaption_SearchClan {
            get {
                return ResourceManager.GetString("WindowCaption_SearchClan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Search Player.
        /// </summary>
        public static string WindowCaption_SearchPlayer {
            get {
                return ResourceManager.GetString("WindowCaption_SearchPlayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select path to WorldOfTanks.exe.
        /// </summary>
        public static string WindowCaption_SelectPathToWorldOfTanksExecutable {
            get {
                return ResourceManager.GetString("WindowCaption_SelectPathToWorldOfTanksExecutable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Settings.
        /// </summary>
        public static string WindowCaption_Settings {
            get {
                return ResourceManager.GetString("WindowCaption_Settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Warning.
        /// </summary>
        public static string WindowCaption_Warning {
            get {
                return ResourceManager.GetString("WindowCaption_Warning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на About.
        /// </summary>
        public static string WindowTitle_AboutWindow {
            get {
                return ResourceManager.GetString("WindowTitle_AboutWindow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Add Replay Folder.
        /// </summary>
        public static string WindowTitle_AddReplayFolder {
            get {
                return ResourceManager.GetString("WindowTitle_AddReplayFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Battle Results.
        /// </summary>
        public static string WindowTitle_BattleResults {
            get {
                return ResourceManager.GetString("WindowTitle_BattleResults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {0}, {1}, battle level - {2}, version - {3}.
        /// </summary>
        public static string WindowTitleFormat_Replay {
            get {
                return ResourceManager.GetString("WindowTitleFormat_Replay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Export.
        /// </summary>
        public static string WondowCaption_Export {
            get {
                return ResourceManager.GetString("WondowCaption_Export", resourceCulture);
            }
        }
    }
}
